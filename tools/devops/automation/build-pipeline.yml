# YAML pipeline build definition
# https://devdiv.visualstudio.com/DevDiv/_apps/hub/ms.vss-ciworkflow.build-ci-hub?_a=edit-build-definition&id=13947&view=Tab_Tasks
#
# YAML build pipeline based on the Jenkins multi-stage (main branch) build workflow
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/job/main/
# https://jenkins.internalx.com/view/Xamarin.MaciOS/job/macios/configure
#
parameters:

- name: provisionatorChannel
  displayName: Provisionator channel to use 
  type: string
  default: 'latest'

- name: runTests
  displayName: Run Simulator Tests
  type: boolean
  default: true

- name: runDeviceTests
  displayName: Run Device Tests 
  type: boolean
  default: true

- name: runOldMacOSTests
  displayName: Run Tests on older macOS versions 
  type: boolean
  default: true

- name: runGovernanceTests
  displayName: Run Governance Checks
  type: boolean
  default: true

- name: runSamples
  displayName: Run Samples
  type: boolean
  default: false
  
- name: enableDotnet
  displayName: Build Dotnet 
  type: boolean
  default: true

- name: enableAPIDiff
  displayName: Enable API diff generation
  type: boolean
  default: true

- name: forceInsertion
  displayName: Force Insertion 
  type: boolean
  default: false 

- name: skipESRP
  displayName: Skip ESRP
  type: boolean
  default: false # only to be used when testing the CI and we do not need a signed pkg

# We are doing some black magic. We have several templates that 
# are executed with different parameters. 
#
# The problem with that is that templates cannot be used with the 
# matrix strategy, so we are doing a little trick based on the following:
#
# 1. We can create a template that expands.
# 2. We can use the each keyword, which allow a loop
# 3. yaml is a super set of json, therefore, it was json dictionaries
#
# the following parameters, define an array of dictionaries with the
# data required by the templates. Do you want a new stage with 
# device tests, no more copy paste, just add the new config.

- name: deviceTestsConfigurations
  displayName: Device test configurations to run
  type: object
  default: [
    {
      devicePrefix: 'iOS64',
      execute: 'runDevice64b',
      stageName: 'ios64b_device',
      displayName: 'iOS64 Device Tests',
      iOSDevicePool: 'VSEng-Xamarin-Mac-Devices',
      useXamarinStorage: False,
      testsLabels: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests',
      statusContext: 'VSTS: device tests iOS',
      iOSDeviceDemand: [
        'ios',
      ]
    },
    {
      devicePrefix: 'tvos',
      execute: 'runDeviceTv',
      stageName: 'tvos_device',
      displayName: 'tvOS Device Tests',
      iOSDevicePool: 'VSEng-Xamarin-Mac-Devices',
      useXamarinStorage: False,
      testsLabels: '--label=run-tvos-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests',
      statusContext: 'VSTS: device tests tvOS',
      iOSDeviceDemand: [
        'tvos',
      ]
    }]

- name: macTestsConfigurations
  displayName: macOS test configurations to run
  type: object
  default: [
    {
      stageName: 'mac_10_15',
      displayName: 'Mac Catalina (10.15)',
      macPool: 'macOS-10.15',
      useImage: true,
      statusContext: 'Mac Catalina (10.15)',
      demands: [
        "Agent.OS -equals Darwin",
        "Agent.OSVersion -equals '10.15'"
      ]
    },
    {
      stageName: 'mac_11_5_m1',
      displayName: 'M1 - Mac Big Sur (11.5)',
      macPool: 'VSEng-VSMac-Xamarin-Shared',
      useImage: false,
      statusContext: 'M1 - Mac Big Sur (11.5)',
      demands: [
        "Agent.OS -equals Darwin",
        "macOS.Name -equals BigSur",
        "macOS.Architecture -equals arm64",
        "Agent.HasDevices -equals False",
        "Agent.IsPaired -equals False"
      ]
    }]

resources:
  repositories:
  - repository: self
    checkoutOptions:
      submodules: true

  - repository: templates
    type: github
    name: xamarin/yaml-templates
    ref: refs/heads/main
    endpoint: xamarin

  - repository: sdk-insertions
    type: github
    name: xamarin/sdk-insertions
    ref: refs/heads/main
    endpoint: xamarin

  - repository: maccore
    type: github
    name: xamarin/maccore
    ref: refs/heads/main
    endpoint: xamarin

  - repository: release-scripts
    type: github
    name: xamarin/release-scripts
    ref: refs/heads/only_codesign
    endpoint: xamarin

variables:
- ${{ if contains(variables['Build.DefinitionName'], 'private') }}:
  - template: templates/variables.yml
- template: templates/common/vs-release-vars.yml@sdk-insertions  # used for the insertion steps
- group: xamops-azdev-secrets
- group: Xamarin-Secrets
- group: Xamarin Signing
- group: Xamarin Release
- group: Xamarin Notarization
- group: XamarinCompatLab                                     # provisionator-uri setting
- name: GitHub.Token                                          # Override the GitHub.Token setting defined in the Xamarin Release group
  value: $(github--pat--vs-mobiletools-engineering-service2)  # Use a token dedicated to critical production workflows and help avoid GitHub throttling
- name: AzDoBuildAccess.Token
  value: $(pat--xamarinc--build-access)
- name: system.debug
  value: true
- name: SigningKeychain
  value: "builder.keychain"
- name: VSDropsPrefix
  value: 'https://vsdrop.corp.microsoft.com/file/v1/xamarin-macios/device-tests'
- name: USE_TCP_TUNNEL                                        # Needed to ensure that devices uses the usb cable to communicate with the devices to run the tests.
  value: true
- name: TeamName
  value: 'xamarin-macios'
- name: PROVISIONATOR_CHANNEL
  value: ${{ parameters.provisionatorChannel }}
- name: PRBuildPool
  value: 'VSEng-Xamarin-RedmondMacBuildPool-iOS-Untrusted'
- name: PRBuildPoolUrl
  value: 'https://devdiv.visualstudio.com/_settings/agentpools?poolId=366&view=agents'
- name: CIBuildPool
  value: 'VSEng-Xamarin-RedmondMacBuildPool-iOS-Trusted'
- name: CIBuildPoolUrl
  value: 'https://devdiv.visualstudio.com/_settings/agentpools?poolId=367&view=agents'
- name: IsPRBuild
  value: ${{ or(eq(variables['Build.Reason'], 'PullRequest'), and(eq(variables['Build.SourceBranchName'], 'merge'), or(eq(variables['Build.Reason'], 'Manual'), eq(variables['Build.Reason'], 'IndividualCI')))) }}

trigger:
  branches:
    include:
    - '*'
    exclude:
    - refs/heads/locfiles/*
  paths:
    exclude:
    - .github
    - docs
    - CODEOWNERS
    - ISSUE_TEMPLATE.md
    - LICENSE
    - NOTICE.txt
    - SECURITY.MD
    - README.md
    - src/README.md
    - tools/mtouch/README.md
    - msbuild/Xamarin.Localization.MSBuild/README.md

pr:
  autoCancel: true
  branches:
    include:
    - main
    - d16-*
    - xcode*
    - release/*
  paths:
    exclude:
    - .github
    - docs
    - CODEOWNERS
    - ISSUE_TEMPLATE.md
    - LICENSE
    - NOTICE.txt
    - SECURITY.MD
    - README.md
    - src/README.md
    - tools/mtouch/README.md
    - msbuild/Xamarin.Localization.MSBuild/README.md

schedules:

# the translations team wants a green build, we can do that on sundays even if 
# the code did not change and without the device tests.
- cron: "0 12 * * 0"
  displayName: Weekly Translations build (Sunday @ noon)
  branches:
    include:
    - main
  always: true

stages:

- ${{ if eq(parameters.runGovernanceTests, true) }}:
  - stage: governance_checks
    displayName: 'Governance Checks'
    dependsOn:
    - build_packages
    jobs:
      - job: governance
        displayName: 'Governance Checks'
        pool:
          vmImage: windows-latest
        steps:
        - template: templates/governance-checks.yml

- stage: build_packages
  displayName: 'Build'
  dependsOn: []
  jobs:
    - template: templates/build/stage.yml
      parameters:
        vsdropsPrefix: ${{ variables.vsdropsPrefix }}
        runTests: ${{ and(parameters.runTests, ne(variables['Build.Reason'], 'Schedule'))}}
        runDeviceTests: ${{ and(parameters.runDeviceTests, ne(variables['Build.Reason'], 'Schedule')) }}
        keyringPass: $(pass--lab--mac--builder--keychain)
        gitHubToken: ${{ variables['GitHub.Token'] }}
        xqaCertPass: $(xqa--certificates--password)
        enableDotnet: ${{ parameters.enableDotnet }}
        enableAPIDiff: ${{ parameters.enableAPIDiff }}
        skipESRP: ${{ parameters.skipESRP }}

# .NET 6 Release Prep and VS Insertion Stages, only execute them when the build comes from an official branch and is not a schedule build from OneLoc
- ${{ if and(ne(variables['Build.Reason'], 'Schedule'), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), eq(parameters.forceInsertion, true))) }}:
  - template: templates/release/vs-insertion-prep.yml

# Test stages
- ${{ if eq(parameters.runDeviceTests, true) }}:
  - ${{ if and(ne(variables['Build.Reason'], 'Schedule'), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual'))) }}:
    - ${{ each config in parameters.deviceTestsConfigurations }}:
      - template: templates/devices/stage.yml
        parameters:
          devicePrefix: ${{ config['devicePrefix'] }} 
          execute: ${{ config['execute'] }} 
          stageName: ${{ config['stageName'] }} 
          displayName: ${{ config['displayName'] }} 
          iOSDevicePool: ${{ config['iOSDevicePool'] }} 
          useXamarinStorage: ${{ config['useXamarinStorage'] }} 
          testsLabels: ${{ config['testsLabels'] }} 
          statusContext: ${{ config['statusContext'] }} 
          iOSDeviceDemand: ${{ config['iOSDeviceDemand'] }} 
          vsdropsPrefix: ${{ variables.vsdropsPrefix }}
          keyringPass: $(pass-XamarinQA-bot-login) 
          gitHubToken: ${{ variables['GitHub.Token'] }}
          xqaCertPass: $(xqa--certificates--password)

- ${{ if eq(parameters.runOldMacOSTests, true) }}:
  - ${{ if and(ne(variables['Build.Reason'], 'Schedule'), or(eq(variables['Build.Reason'], 'IndividualCI'), eq(variables['Build.Reason'], 'Manual'))) }}:
    - ${{ each config in parameters.macTestsConfigurations }}:
      - template: templates/mac/stage.yml
        parameters:
          stageName: ${{ config['stageName'] }}
          displayName: ${{ config['displayName'] }}
          macPool: ${{ config['macPool'] }}
          useImage: ${{ config['useImage'] }}
          statusContext: ${{ config['statusContext'] }}
          keyringPass: $(pass--lab--mac--builder--keychain)
          demands: ${{ config['demands'] }}

    - template: templates/windows/stage.yml
      parameters:
        stageName: windows_integration
        displayName: 'Windows Integration Tests'
        pool: 'VSEng-Xamarin-Mac-Devices' # currently ignored until the VS team provides a real one
        statusContext: 'Windows Integration Tests'

# iOS 32b tests are slow and do not have many machines, for that reason we are going just to run them in the Schedule builds.
# This means we are going to get the translations AND the iOS 32b on those builds.
#
- ${{ if eq(variables['Build.Reason'], 'Schedule') }}: 
  - template: templates/devices/stage.yml
    parameters:
      devicePrefix: 'iOS32b'
      execute: 'runDevice32b'
      stageName: 'ios32b_device'
      displayName: 'iOS32b Device Tests'
      iOSDevicePool: 'VSEng-Xamarin-QA'
      useXamarinStorage: False
      testsLabels: '--label=run-ios-32-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests'
      statusContext: 'VSTS: device tests iOS32b'
      iOSDeviceDemand: 'xismoke-32'
      vsdropsPrefix: ${{ variables.vsdropsPrefix }}
      keyringPass: $(pass--lab--mac--builder--keychain)
      gitHubToken: ${{ variables['GitHub.Token'] }}
      xqaCertPass: $(xqa--certificates--password)

- ${{ if eq(parameters.runSamples, true) }}:
  # TODO: Not the real step
  - stage: sample_testing
    displayName: 'Sample testing'
    dependsOn:
    - build_packages
    condition: and(succeeded(), contains (stageDependencies.build_packages.build.outputs['configuration.RunSampleTests'], 'True'))
    jobs:
    - job: sample_testing
      pool:
        vmImage: ubuntu-latest
      steps:
        # TODO: do parse labels
        - bash: |
            echo "Samples!"
          displayName: 'Sample testing'
