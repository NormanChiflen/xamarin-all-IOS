parameters:
- name: enableDotnet
  type: boolean
  default: false

- name: sbomFilter
  type: string
  default: '*'            # Supports multiple filters separated by semi-colon such as *.msi;*.nupkg

steps:

- checkout: self
  persistCredentials: true
  path: s/xamarin-macios

# Download the Html Report that was added by the tests job.
- task: DownloadPipelineArtifact@2
  displayName: Download packages
  inputs:
    patterns: '**'
    allowFailedBuilds: true
    path: $(Build.SourcesDirectory)/artifacts

- powershell : |
    $packagePrefix = "https://bosstoragemirror.blob.core.windows.net/wrench/$Env:VIRTUAL_PATH/package"
    $files =  Get-ChildItem -Path "$(Build.SourcesDirectory)\artifacts\package" -File -Force -Name
    $manifestFile = "$(Build.SourcesDirectory)\artifacts\package\manifest"
    foreach ($f in $files) {
      Add-Content -Path "$manifestFile" -Value "$packagePrefix/$f"
    }
    Add-Content -Path "$manifestFile" -Value "$packagePrefix/$artifacts.json"
    Add-Content -Path "$manifestFile" -Value "$packagePrefix/manifest"
  env:
    VIRTUAL_PATH: $(Build.SourceBranchName)/$(Build.SourceVersion)/$(Build.BuildId)
  displayName: "Build manifest"

# Important needed for the next step
- template: generate-workspace-info.yml@templates
  parameters:
    GitHubToken: $(GitHub.Token)
    ArtifactDirectory: $(Build.SourcesDirectory)/package-internal

- task: AzureFileCopy@3
  displayName: 'Publish package to Azure'
  name: upload
  inputs:
    SourcePath: $(Build.SourcesDirectory)/artifacts/package
    azureSubscription:  'Azure Releng (7b4817ae-218f-464a-bab1-a9df2d99e1e5)'
    Destination: AzureBlob
    storage: bosstoragemirror
    ContainerName: wrench
    BlobPrefix: $(Build.SourceBranchName)/$(Build.SourceVersion)/$(Build.BuildId)/package  # ideally, we would use a variable for this
    outputStorageUri: Parameters.outputStorageUri
    outputStorageContainerSasToken: PackageSasToken

- task: AzureFileCopy@3
  displayName: 'Publish manifest to Azure'
  inputs:
    SourcePath: $(Build.SourcesDirectory)/artifacts/package/manifest
    azureSubscription:  'Azure Releng (7b4817ae-218f-464a-bab1-a9df2d99e1e5)'
    Destination: AzureBlob
    storage: bosstoragemirror
    ContainerName: wrench
    BlobPrefix: jenkins/$(Build.SourceBranchName)/$(Build.SourceVersion)
    outputStorageUri: Parameters.outputStorageUri
    outputStorageContainerSasToken: PackageSasToken

- task: AzureFileCopy@3
  displayName: 'Publish manifest to Azure as latest'
  inputs:
    SourcePath: $(Build.SourcesDirectory)/artifacts/package/manifest
    azureSubscription:  'Azure Releng (7b4817ae-218f-464a-bab1-a9df2d99e1e5)'
    Destination: AzureBlob
    storage: bosstoragemirror
    ContainerName: wrench
    BlobPrefix: jenkins/$(Build.SourceBranchName)/latest
    outputStorageUri: Parameters.outputStorageUri
    outputStorageContainerSasToken: PackageSasToken

- task: AzureFileCopy@3
  displayName: 'Publish manifest to Azure per commit'
  inputs:
    SourcePath: $(Build.SourcesDirectory)/artifacts/package/manifest
    azureSubscription:  'Azure Releng (7b4817ae-218f-464a-bab1-a9df2d99e1e5)'
    Destination: AzureBlob
    storage: bosstoragemirror
    ContainerName: wrench
    BlobPrefix: jenkins/$(Build.SourceVersion)
    outputStorageUri: Parameters.outputStorageUri
    outputStorageContainerSasToken: PackageSasToken

- powershell: |
    $execPath="$Env:BUILD_SOURCESDIRECTORY\Xamarin.Build.Tasks\tools\BuildTasks\build-tasks.exe"

    if (-not (Test-Path $execPath -PathType Leaf)) {
        Write-Host "Build task not found at $execPath!"
    }

    $maciosPath="$Env:BUILD_SOURCESDIRECTORY"

    Write-Host "Exect path is $execPath"
    Write-Host "Macios path is $maciosPath"
    Write-Host "$Env:VIRTUAL_PATH"
    Write-Host "Artifacts url wrench/$Env:VIRTUAL_PATH/package"

    Invoke-Expression "$execPath artifacts -s `"$maciosPath`" -a bosstoragemirror -c $Env:STORAGE_PASS -u `"wrench/$Env:VIRTUAL_PATH/package`" -d `"$(Build.SourcesDirectory)\artifacts\package`" -o `"$(Build.SourcesDirectory)\artifacts\package`""
  env:
    VIRTUAL_PATH: $(Build.SourceBranchName)/$(Build.SourceVersion)/$(Build.BuildId)
    GITHUB_AUTH_TOKEN: $(GitHub.Token)
    STORAGE_PASS: $(auth-xamarin-bosstoragemirror-account-key)
  displayName: 'Generate artifacts.json'

# upload the artifacts.json to the build pipeline artifacts so that it can be consumed by other jobs to
# get the required urls
- task: PublishPipelineArtifact@1
  displayName: 'Publish Build Artifacts'
  inputs:
    targetPath: $(Build.SourcesDirectory)/artifacts/package/artifacts.json
    artifactName: pkg-info
  continueOnError: true

- powershell: |
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\tools\devops\automation\scripts\GitHub.psm1
    Import-Module $Env:SYSTEM_DEFAULTWORKINGDIRECTORY\tools\devops\automation\scripts\VSTS.psm1

    Dir "$(Build.SourcesDirectory)\artifacts\package"

    # $Env:STORAGE_URI/ ends with a /, annoying
    $pkgsVirtualUrl = "$Env:STORAGE_URI" +"$(Build.SourceBranchName)/$(Build.SourceVersion)/$(Build.BuildId)/package"
    Write-Host "Urls is $pkgsVirtualUrl"

    $pkgsPath = "$(Build.SourcesDirectory)\artifacts\package"

    $iOSPkg = Get-ChildItem -Path $pkgsPath -File -Force -Name xamarin.ios-*.pkg
    Write-Host "iOS PKG is $iOSPkg"

    $macPkg = Get-ChildItem -Path $pkgsPath -File -Force -Name xamarin.mac-*.pkg
    Write-Host "mac PKG is $macPkg"

    # create an array with objects so that we can set each of the statuses:
    $statusInfo = @(
      @{
        Path = "$pkgsPath\\$iOSPkg";
        Context = "PKG-Xamarin.iOS";
        Description = $iOSPkg;
        TargetUrl = "$pkgsVirtualUrl/$iOSPkg";
        Error = "xamarin.ios pkg not found";
      },
      @{
        Path = "$pkgsPath\\notarized\\xamarin.ios-*.pkg";
        Context = "PKG-Xamarin.iOS-notarized"
        Description = "$iOSPkg (Notarized)" ;
        TargetUrl = "$pkgsVirtualUrl/notarized/$iOSPkg" ;
        Error = "Notarized xamarin.ios pkg not found" ;
      },
      @{
        Path = "$pkgsPath\\xamarin.mac-*.pkg" ;
        Context = "PKG-Xamarin.Mac" ;
        Description = "$macPkg" ;
        TargetUrl = "$pkgsVirtualUrl/$macPkg" ;
        Error = "xamarin.mac pkg not found." ;
      },
      @{
        Path = "$pkgsPath\\notarized\\xamarin.mac-*.pkg" ;
        Context = "PKG-Xamarin.Mac-notarized" ;
        Description = "$macPkg (Notarized)" ;
        TargetUrl = "$pkgsVirtualUrl/notarized/$macPkg" ;
        Error = "Notarized xamarin.mac pkg not found." ;
      },
      @{
        Path = "$pkgsPath\bundle.zip" ;
        Context = "bundle.zip" ;
        Description = "bundle.zip" ;
        TargetUrl = "$pkgsVirtualUrl/bundle.zip" ;
        Error = "bundle.zip not found." ;
      },
      @{
        Path = "$pkgsPath\msbuild.zip" ;
        Context = "msbuild.zip" ;
        Description = "msbuild.zip" ;
        TargetUrl = "$pkgsVirtualUrl/msbuild.zip" ;
        Error = "msbuild.zip not found." ;
      }
    )

    foreach ($info in $statusInfo) {
      if (Test-Path $info.Path -PathType Leaf) {
          Set-GitHubStatus -Status "success" -Description $info.Description -TargetUrl $info.TargetUrl  -Context $info.Context
      } else {
          Set-GitHubStatus -Status "error" -Description $info.Error -Context $info.Context
      }
    }
    if ($Env:ENABLE_DOTNET -eq "True" -and  $Env:SkipNugets -ne "True") {
      $nugets = Get-ChildItem -Path $pkgsPath -Filter *.nupkg -File -Name
      Write-Host $nugets
      Write-Host "nuget count is $($nugets.Count)"

      if ($nugets.Count -gt 0) {
        Write-Host "Setting status to success."
        Set-GitHubStatus -Status "success" -Description "Nugets built." -TargetUrl "$pkgsVirtualUrl/$n" -Context "$(Build.DefinitionName) (Nugets built)"
        Write-Host "Publishing result is $Env:NUGETS_PUBLISHED"
        if ($Env:NUGETS_PUBLISHED -ne "Failed") {
          Set-GitHubStatus -Status "success" -Description "Nugets published." -TargetUrl "$pkgsVirtualUrl/$n" -Context "$(Build.DefinitionName) (Nugets published)"
        } else {
          Set-GitHubStatus -Status "error" -Description "Error when publishing nugets." -TargetUrl "$pkgsVirtualUrl/$n" -Context "$(Build.DefinitionName) (Nugets published)"
        }
      } else {
        Write-Host "Setting nuget status to failure."
        Set-GitHubStatus -Status "error" -Description "No nugets were built." -TargetUrl "$pkgsVirtualUrl/$n" -Context "$(Build.DefinitionName) (Nugets built)"
        Set-GitHubStatus -Status "error" -Description "No nugets were published." -TargetUrl "$pkgsVirtualUrl/$n" -Context "$(Build.DefinitionName) (Nugets published)"
      }
    }


    $msi = Get-ChildItem -Path $pkgsPath -Filter *.msi -File -Name

    foreach ($n in $msi) {
      Set-GitHubStatus -Status "success" -Description "$n" -TargetUrl "$pkgsVirtualUrl/$n" -Context "$n"
    }

    Write-Host "Setting SBOM.PackagesPath: ${pkgsPath}"
    Write-Host "##vso[task.setvariable variable=SBOM.PackagesPath]$pkgsPath"
  env:
    BUILD_REVISION: $(Build.SourceVersion)
    GITHUB_TOKEN: $(GitHub.Token)
    ACCESSTOKEN: $(System.AccessToken)
    STORAGE_URI: $(Parameters.outputStorageUri)
    ${{ if eq(parameters.enableDotnet, true) }}:
      ENABLE_DOTNET: "True"
  displayName: 'Set GithubStatus'

# Executive Order (EO): Software Bill of Materials (SBOM): https://www.1eswiki.com/wiki/ADO_sbom_Generator
- powershell: |
    # https://stackoverflow.com/questions/188892/glob-pattern-matching-in-net
    function Is-Match([string] $Text, [string] $Filter)
    {
        $isMatch = $false

        $regexGlobEquivalent = [Regex]::Escape($Filter).Replace("\*", ".*").Replace("\?", ".")
        $pattern = "^${regexGlobEquivalent}$"

        # https://stackoverflow.com/questions/42700341/how-can-i-use-powershell-to-do-a-net-regex-matches-method-and-add-a-timeout
        $regEx = New-Object -TypeName regex -ArgumentList $pattern, ([Text.RegularExpressions.RegexOptions]::Singleline, [Text.RegularExpressions.RegexOptions]::IgnoreCase)
        $isMatch = $regEx.IsMatch($Text)

        return $isMatch
    }

    $filter = "${{ parameters.sbomFilter }}"
    Write-Host "sbomFilter: ${filter}"

    $sbomStagingDirectory = "$(Build.ArtifactStagingDirectory)/sbom"
    Write-Host "Creating SBOM staging directory: ${sbomStagingDirectory}"

    if (-not ([IO.Directory]::Exists($sbomStagingDirectory))) {
      [IO.Directory]::CreateDirectory($sbomStagingDirectory)
    }

    $pkgsPath = "$(SBOM.PackagesPath)"
    Write-Host "Packages path: ${pkgsPath}"

    if ([string]::IsNullOrEmpty($filter)) {
        $filter = '*'       # Even if the caller attempts to force the parameter to an empty string treat empty as all '*'
    }

    $filters = $filter.Split(';', [StringSplitOptions]::RemoveEmptyEntries)
    Write-Host "Copying files based on ${filter}"

    $files = [IO.Directory]::GetFiles($pkgsPath)
    $files | foreach {
      $filename = [IO.Path]::GetFileName($_)
      $isMatch = $false
      $filters | foreach {
        if (-not $isMatch) {
          $isMatch = Is-Match -Text $filename -Filter $_
        }
      }

      if ($isMatch) {
        $destPathAndFilename = [IO.Path]::Combine($sbomStagingDirectory, $filename)
        Write-Host "Copying $_ to ${destPathAndFilename}. Filter: ${filter}"
        [IO.File]::Copy($_, $destPathAndFilename)
      } else {
        Write-Host "Skipped file copy based on filter ${filter}: ${filename}"
      }
    }
  displayName: 'SBOM: Staging'

- powershell: |
    function Get-PackageFileNames([string] $PkgsPath) {
      $files = [IO.Directory]::GetFiles($PkgsPath)
      $pkgFiles = $files | foreach { [IO.Path]::GetFileName($_) }
      return $pkgFiles
    }

    $pkgsPath = "$(SBOM.PackagesPath)"
    Write-Host "Packages path: ${pkgsPath}"

    $packageFileNames = Get-PackageFileNames -PkgsPath $pkgsPath
    $packageFileNames = @($packageFileNames)
    Write-Host "Package files: $($packageFileNames.Count)"
    $packageFileNames | foreach { Write-Host $_ }

    Write-Host "Setting SBOM.ProductName: Xamarin iOS"
    Write-Host "##vso[task.setvariable variable=SBOM.ProductName]Xamarin iOS"         # SBOM generation only lets us use a single package name and so choose 'Xamarin iOS' instead of 'Xamarin Mac'

    $sbomManifestVersion = "$(Build.BuildId)"
    Write-Host "Setting SBOM.ProductVersion to the build number: ${sbomManifestVersion}"
    Write-Host "##vso[task.setvariable variable=SBOM.ProductVersion]$sbomManifestVersion"
  displayName: 'SBOM: Set ProductVersion'

- task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
  displayName: 'SBOM: Generation'
  inputs:
    BuildDropPath: '$(Build.ArtifactStagingDirectory)/sbom'
    PackageName: '$(SBOM.ProductName)'
    PackageVersion: '$(SBOM.ProductVersion)'
    Verbosity: Verbose

- powershell: |
    # The pkg files are already included under the drop-x64 and drop-arm locations
    # We only needed them temporarily here as a means to produce the Software Bill of Materials (SBOM) manifest
    # No need to include the pkg files (and duplicate them) in the SBOM drop
    $sbomStagingDirectory = "$(Build.ArtifactStagingDirectory)/sbom"

    # Delete all top-level package files. This should leave the SBOM '_manifest' directory intact
    $pkgFiles = [IO.Directory]::GetFiles($sbomStagingDirectory)
    $pkgFiles | foreach {
      Write-Host "Deleting PKG: $_"
      [IO.File]::Delete($_)
    }
  displayName: 'SBOM: Cleanup'

- task: PublishBuildArtifacts@1
  displayName: 'SBOM: Publish'
  inputs:
    artifactName: sbom
    pathToPublish: $(Build.ArtifactStagingDirectory)/sbom
  condition: succeeded()
