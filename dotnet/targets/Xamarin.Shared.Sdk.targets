<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<!-- Use single-project MSBuild properties to generate the application manifest by default -->
		<GenerateApplicationManifest Condition="'$(GenerateApplicationManifest)' == ''">true</GenerateApplicationManifest>
		<Version Condition="'$(GenerateApplicationManifest)' == 'true' and '$(ApplicationDisplayVersion)' != ''">$(ApplicationDisplayVersion)</Version>
	</PropertyGroup>

	<UsingTask TaskName="Xamarin.MacDev.Tasks.CompileNativeCode" AssemblyFile="$(_XamarinTaskAssembly)" />
	<UsingTask TaskName="Xamarin.MacDev.Tasks.FilterStaticFrameworks" AssemblyFile="$(_XamarinTaskAssembly)" />
	<UsingTask TaskName="Xamarin.MacDev.Tasks.FindAotCompiler" AssemblyFile="$(_XamarinTaskAssembly)" />
	<UsingTask TaskName="Xamarin.MacDev.Tasks.LinkNativeCode" AssemblyFile="$(_XamarinTaskAssembly)" />
	<UsingTask TaskName="Xamarin.MacDev.Tasks.SymbolStrip" AssemblyFile="$(_XamarinTaskAssembly)" />
	<UsingTask TaskName="Xamarin.MacDev.Tasks.MergeAppBundles" AssemblyFile="$(_XamarinTaskAssembly)" />
	<UsingTask TaskName="Xamarin.MacDev.Tasks.ILStrip" AssemblyFile="$(_XamarinTaskAssembly)" />

	<!-- Project types and how do we distinguish between them

									  OutputType   Custom variable
		==================================================================
		iOS Executable Project        Exe
		iOS App Extension Project     Library      IsAppExtension
		iOS Binding Project           Library      IsBindingProject
		iOS Class Library Project     Library

		tvOS Executable Project       Exe
		tvOS App Extension Project    Library      IsAppExtension
		tvOS Binding Project          Library      IsBindingProject
		tvOS Class Library Project    Library

		watchOS App Project           Library      IsWatchOSApp
		watchOS App Extension Project Library      IsAppExtension
		watchOS Binding Project       Library      IsBindingProject
		watchOS Class Library Project Library

		macOS Executable Project        Exe
		macOS App Extension Project     Library      IsAppExtension
		macOS Binding Project           Library      IsBindingProject
		macOS Class Library Project     Library

	-->

	<PropertyGroup>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Exe'">iOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">iOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">iOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'iOS' And '$(OutputType)' == 'Library'">iOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Exe'">tvOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">tvOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">tvOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'tvOS' And '$(OutputType)' == 'Library'">tvOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsWatchOSApp)' != ''">watchOSAppProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsAppExtension)' != ''">watchOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS' And '$(IsBindingProject)' != ''">watchOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'watchOS'">watchOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Exe'">macOSExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">macOSAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">macOSBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'macOS' And '$(OutputType)' == 'Library'">macOSClassLibrary</_ProjectType>

		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'MacCatalyst' And '$(OutputType)' == 'Exe'">MacCatalystExecutableProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'MacCatalyst' And '$(OutputType)' == 'Library' And '$(IsAppExtension)' != ''">MacCatalystAppExtensionProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'MacCatalyst' And '$(OutputType)' == 'Library' And '$(IsBindingProject)' != ''">MacCatalystBindingProject</_ProjectType>
		<_ProjectType Condition="'$(_ProjectType)' == '' And '$(_PlatformName)' == 'MacCatalyst' And '$(OutputType)' == 'Library'">MacCatalystClassLibrary</_ProjectType>
	</PropertyGroup>

	<!-- Automatically supply project capabilities for IDE use -->
	<ItemGroup>
		<ProjectCapability Include="Apple" />
		<ProjectCapability Include="Mobile" />
		
		<ProjectCapability Include="IOSApplication" Condition="'$(_ProjectType)' == 'iOSExecutableProject'" />
		<ProjectCapability Include="IOSAppExtension" Condition="'$(_ProjectType)' == 'iOSAppExtensionProject'" />
		<ProjectCapability Include="IOSBinding" Condition="'$(_ProjectType)' == 'iOSBindingProject'" />
		<ProjectCapability Include="IOSClassLibrary" Condition="'$(_ProjectType)' == 'iOSClassLibrary'" />
		<ProjectCapability Include="TvOSApplication" Condition="'$(_ProjectType)' == 'tvOSExecutableProject'" />
		<ProjectCapability Include="TvOSAppExtension" Condition="'$(_ProjectType)' == 'tvOSAppExtensionProject'" />
		<ProjectCapability Include="TvOSBinding" Condition="'$(_ProjectType)' == 'tvOSBindingProject'" />
		<ProjectCapability Include="TvOSClassLibrary" Condition="'$(_ProjectType)' == 'tvOSClassLibrary'" />
		<ProjectCapability Include="WatchOSApplication" Condition="'$(_ProjectType)' == 'watchOSAppProject'" />
		<ProjectCapability Include="WatchOSAppExtension" Condition="'$(_ProjectType)' == 'watchOSAppExtensionProject'" />
		<ProjectCapability Include="WatchOSBinding" Condition="'$(_ProjectType)' == 'watchOSBindingProject'" />
		<ProjectCapability Include="WatchOSClassLibrary" Condition="'$(_ProjectType)' == 'watchOSClassLibrary'" />
		<ProjectCapability Include="MacOSApplication" Condition="'$(_ProjectType)' == 'macOSExecutableProject'" />
		<ProjectCapability Include="MacOSAppExtension" Condition="'$(_ProjectType)' == 'macOSAppExtensionProject'" />
		<ProjectCapability Include="MacOSBinding" Condition="'$(_ProjectType)' == 'macOSBindingProject'" />
		<ProjectCapability Include="MacOSClassLibrary" Condition="'$(_ProjectType)' == 'macOSClassLibrary'" />
		<ProjectCapability Include="MacCatalystApplication" Condition="'$(_ProjectType)' == 'MacCatalystExecutableProject'" />
		<ProjectCapability Include="MacCatalystAppExtension" Condition="'$(_ProjectType)' == 'MacCatalystAppExtensionProject'" />
		<ProjectCapability Include="MacCatalystBinding" Condition="'$(_ProjectType)' == 'MacCatalystBindingProject'" />
		<ProjectCapability Include="MacCatalystClassLibrary" Condition="'$(_ProjectType)' == 'MacCatalystClassLibrary'" />

		<ProjectCapability Condition="'$(_KeepLaunchProfiles)' != 'true'" Remove="LaunchProfiles" />
	</ItemGroup>
	
	<PropertyGroup>
		<!-- Add a property that specifies the name of the platform assembly for each platform -->
		<_PlatformAssemblyName Condition=" '$(_PlatformName)' == 'iOS' ">Xamarin.iOS</_PlatformAssemblyName>
		<_PlatformAssemblyName Condition=" '$(_PlatformName)' == 'tvOS' ">Xamarin.TVOS</_PlatformAssemblyName>
		<_PlatformAssemblyName Condition=" '$(_PlatformName)' == 'watchOS' ">Xamarin.WatchOS</_PlatformAssemblyName>
		<_PlatformAssemblyName Condition=" '$(_PlatformName)' == 'macOS' ">Xamarin.Mac</_PlatformAssemblyName>
		<_PlatformAssemblyName Condition=" '$(_PlatformName)' == 'MacCatalyst' ">Xamarin.MacCatalyst</_PlatformAssemblyName>

		<!-- We have to set DebuggerSupport before importing Microsoft.NET.Sdk -->
		<!-- That means we have to set _BundlerDebug before that, because DebuggerSupport depends on it -->
		<!-- Xamarin.Mac: use MmpDebug (this differs from the old-style logic, which checks $(DebugSymbols) as well) -->
		<_BundlerDebug Condition="'$(_BundlerDebug)' == '' And '$(_PlatformName)' == 'macOS'">$(MmpDebug)</_BundlerDebug>
		<!-- Xamarin.iOS: Use MtouchDebug -->
		<_BundlerDebug Condition="'$(_BundlerDebug)' == '' And '$(_PlatformName)' != 'macOS'">$(MtouchDebug)</_BundlerDebug>
		<!-- Otherwise the default is true if we're building a Debug configuration -->
		<_BundlerDebug Condition="'$(_BundlerDebug)' == '' And '$(Configuration)' == 'Debug'">true</_BundlerDebug>
		<!-- As a last resort, the default is false for all platforms -->
		<_BundlerDebug Condition="'$(_BundlerDebug)' == ''">false</_BundlerDebug>

		<!-- On the other hand, we want the linker to link away debug support in the actual code unless we're building for Debug -->
		<DebuggerSupport Condition="'$(DebuggerSupport)' == ''">$(_BundlerDebug)</DebuggerSupport>

		<!--
			Other runtime libraries feature switches defaults
			Available feature switches: https://github.com/dotnet/runtime/blob/master/docs/workflow/trimming/feature-switches.md
		-->
		<CustomResourceTypesSupport Condition="'$(CustomResourceTypesSupport)' == ''">false</CustomResourceTypesSupport>
		<EnableUnsafeBinaryFormatterInDesigntimeLicenseContextSerialization Condition="'$(EnableUnsafeBinaryFormatterInDesigntimeLicenseContextSerialization)' == ''">false</EnableUnsafeBinaryFormatterInDesigntimeLicenseContextSerialization>
		<EnableUnsafeBinaryFormatterSerialization Condition="'$(EnableUnsafeBinaryFormatterSerialization)' == ''">false</EnableUnsafeBinaryFormatterSerialization>
		<EnableUnsafeUTF7Encoding Condition="'$(EnableUnsafeUTF7Encoding)' == ''">false</EnableUnsafeUTF7Encoding>
		<EventSourceSupport Condition="'$(EventSourceSupport)' == ''">false</EventSourceSupport>
		<HttpActivityPropagationSupport Condition="'$(HttpActivityPropagationSupport)' == ''">false</HttpActivityPropagationSupport>
		<InvariantGlobalization Condition="'$(InvariantGlobalization)' == ''">false</InvariantGlobalization>
		<StartupHookSupport Condition="'$(StartupHookSupport)' == ''">false</StartupHookSupport>
		<UseSystemResourceKeys Condition="'$(UseSystemResourceKeys)' == '' And '$(_BundlerDebug)' != 'true'">true</UseSystemResourceKeys>
		<UseSystemResourceKeys Condition="'$(UseSystemResourceKeys)' == '' And '$(_BundlerDebug)' == 'true'">false</UseSystemResourceKeys>
		<UseNativeHttpHandler Condition="'$(_PlatformName)' != 'macOS' And '$(UseNativeHttpHandler)' == ''">true</UseNativeHttpHandler>
		<AutoreleasePoolSupport Condition="'$(AutoreleasePoolSupport)' == ''">true</AutoreleasePoolSupport>
		<_AggressiveAttributeTrimming Condition="'$(_AggressiveAttributeTrimming)' == ''">true</_AggressiveAttributeTrimming>		
		<NullabilityInfoContextSupport Condition="'$(NullabilityInfoContextSupport)' == ''">false</NullabilityInfoContextSupport>
		<BuiltInComInteropSupport Condition="'$(BuiltInComInteropSupport)' == ''">false</BuiltInComInteropSupport>

		<!-- We don't need to generate reference assemblies for apps or app extensions -->
		<ProduceReferenceAssembly Condition="'$(ProduceReferenceAssembly)' == '' And ('$(OutputType)' == 'Exe' Or '$(IsAppExtension)' == 'true')">false</ProduceReferenceAssembly>
	</PropertyGroup>

	<PropertyGroup>
		<_GlobalizationDataFile Condition="'$(_PlatformName)' != 'macOS' And '$(InvariantGlobalization)' != 'true' And '$(_GlobalizationDataFile)' == ''">icudt.dat</_GlobalizationDataFile>
	</PropertyGroup>

	<PropertyGroup>
		<TargetPlatformSupported Condition=" '$(TargetPlatformIdentifier)' == '$(_PlatformName)' ">true</TargetPlatformSupported>
	</PropertyGroup>

	<!-- Default item includes (globs and implicit references) -->
	<Import Project="Xamarin.Shared.Sdk.DefaultItems.targets" />

	<!-- dotnet publish -->
	<Import Project="Xamarin.Shared.Sdk.Publish.targets" />

	<!-- This is a hack until we get the TFM values for real from the .NET build logic -->
	<PropertyGroup>
		<_TargetFrameworkPlatform Condition="'$(_PlatformName)' == 'iOS'">ios</_TargetFrameworkPlatform>
		<_TargetFrameworkPlatform Condition="'$(_PlatformName)' == 'tvOS'">tvos</_TargetFrameworkPlatform>
		<_TargetFrameworkPlatform Condition="'$(_PlatformName)' == 'watchOS'">watchos</_TargetFrameworkPlatform>
		<_TargetFrameworkPlatform Condition="'$(_PlatformName)' == 'macOS'">macos</_TargetFrameworkPlatform>
		<_TargetFrameworkPlatform Condition="'$(_PlatformName)' == 'MacCatalyst'">maccatalyst</_TargetFrameworkPlatform>
		<_ComputedTargetFrameworkMoniker Condition=" '$(_TargetFrameworkPlatform)' != '' ">$(TargetFrameworkMoniker),Profile=$(_TargetFrameworkPlatform)</_ComputedTargetFrameworkMoniker>
	</PropertyGroup>

	<!-- Inject our custom logic into *DependsOn variables -->
	<PropertyGroup>
		<!-- single-rid build -->
		<BuildDependsOn Condition="'$(RuntimeIdentifiers)' == '' And '$(_IsMultiRidBuild)' != 'true'">
			_ComputePublishTrimmed;
			BuildOnlySettings;
			_CollectBundleResources;
			_PackLibraryResources;
			_UnpackLibraryResources;
			$(BuildDependsOn);
			_CreateAppBundle;
			Codesign;
			CreateIpa;
			_CreateInstaller;
			Archive;
		</BuildDependsOn>

		<!-- inner build for multi-rid build -->
		<BuildDependsOn Condition="'$(_IsMultiRidBuild)' == 'true'">
			_ComputePublishTrimmed;
			BuildOnlySettings;
			_CollectBundleResources;
			_PackLibraryResources;
			_UnpackLibraryResources;
			$(BuildDependsOn);
			_CreateAppBundle;
		</BuildDependsOn>

		<!-- outer build for multi-rid build -->
		<BuildDependsOn Condition="'$(RuntimeIdentifiers)' != ''">
			_CollectBundleResources;
			_RunRidSpecificBuild;
			_CompileEntitlements;
			_DetectAppManifest;
			_ReadAppManifest;
			_WriteAppManifest;
			_CopyResourcesToBundle;
			_CreateMergedAppBundle;
			Codesign;
			CreateIpa;
			_CreateInstaller;
			Archive;
		</BuildDependsOn>

		<!-- We re-use ComputeFilesToPublish & CopyFilesToPublishDirectory to copy files to the .app -->
		<!-- ComputeFilesToPublish will run ILLink -->
		<!-- single-rid build (either plain single, or inner build for multi-rid build) -->
		<!-- Note - _ComputeStripAssemblyIL must be before _StripAssemblyIL as msbuild DependsOn do not execute before Conditions are evaluated -->
		<CreateAppBundleDependsOn Condition="'$(RuntimeIdentifiers)' == ''">
			$(CreateAppBundleDependsOn);
			_CopyResourcesToBundle;
			_CompileCoreMLModels;
			_CreatePkgInfo;
			_SmeltMetal;
			_TemperMetal;
			_CompileEntitlements;
			_DetectAppManifest;
			_ReadAppManifest;
			_WriteAppManifest;
			_ResolveAppExtensionReferences;
			_ExtendAppExtensionReferences;
			_ComputeLinkerArguments;
			_ComputeFrameworkFilesToPublish;
			_ComputeDynamicLibrariesToPublish;
			ComputeFilesToPublish;
			_ComputeStripAssemblyIL;
			_StripAssemblyIL;
			_LoadLinkerOutput;
			_CompileNativeExecutable;
			_LinkNativeExecutable;
			_ComputePublishLocation;
			CopyFilesToPublishDirectory;
			_CopyDirectoriesToBundle;
			_CopyAppExtensionsToBundle;
		</CreateAppBundleDependsOn>

		<!-- not inner build for multi-rid build (single-rid build or outer build for multi-rid build) -->
		<CreateAppBundleDependsOn Condition="'$(_PlatformName)' != 'macOS' And '$(_IsMultiRidBuild)' != 'true'">
			_CreateDebugSettings;
			_CreateDebugConfiguration;
			$(CreateAppBundleDependsOn);
		</CreateAppBundleDependsOn>

		<!-- outer build for multi-rid build -->
		<CreateAppBundleDependsOn Condition="'$(RuntimeIdentifiers)' != ''">
			$(CreateAppBundleDependsOn);
			_CompileEntitlements;
			_CreateMergedAppBundle;
		</CreateAppBundleDependsOn>
	</PropertyGroup>

	<!-- PublishTrimmed must be calculated as part of a target because IsMacEnabled on Windows will be set after connecting to the Mac -->
	<Target Name="_ComputePublishTrimmed">
		<PropertyGroup>
			<_MustTrim Condition="'$(_MustTrim)' == '' And '$(RuntimeIdentifier)' != '' And ($(_ProjectType.EndsWith('ExecutableProject')) Or $(_ProjectType.EndsWith('AppExtensionProject'))) And '$(IsMacEnabled)' == 'true'">true</_MustTrim>
			<PublishTrimmed Condition="'$(PublishTrimmed)' == '' And '$(_MustTrim)' == 'true'">true</PublishTrimmed>
		</PropertyGroup>
		<Error Condition="'$(_MustTrim)' == 'true' And '$(PublishTrimmed)' != 'true'" Text="$(_PlatformName) projects must build with PublishTrimmed=true. Current value: $(PublishTrimmed)." />
	</Target>

	<Target Name="_WarnRuntimeIdentifiersClash" Condition="'$(_RuntimeIdentifiersClashMessage)' != ''">
		<Warning Text="$(_RuntimeIdentifiersClashMessage)" />
	</Target>

	<!-- If we have multiple runtime identifiers, then we need to run an inner build for each of them -->
	<Target Name="_BuildRidSpecificAppBundle"
		DependsOnTargets="Build"
		Returns="@(_AssemblyPublishDirectory)"
		>
		<ItemGroup>
			<_AssemblyPublishDirectory Include="$(_AppBundlePath)">
				<RuntimeIdentifier>$(RuntimeIdentifier)</RuntimeIdentifier>
				<TargetArchitectures>$(TargetArchitectures)</TargetArchitectures>
			</_AssemblyPublishDirectory>
		</ItemGroup>
	</Target>

	<Target Name="_RunRidSpecificBuild" Condition="'$(RuntimeIdentifiers)' != '' And '$(RuntimeIdentifier)' == ''" DependsOnTargets="_DetectSdkLocations;_GenerateBundleName">
		<ItemGroup>
			<!-- Convert RuntimeIdentifiers (a property) to an item group -->
			<_RuntimeIdentifiersAsItems Include="$(RuntimeIdentifiers)" Condition=" '$(RuntimeIdentifiers)' != '' " />
			<_RuntimeIdentifiersAsItems Update="@(_RuntimeIdentifiersAsItems)">
				<!-- Platform = "rid-arch".Substring (0, "rid-arch".IndexOf ('-')) -->
				<Platform>$([System.String]::new('%(Identity)').Substring(0, $([System.String]::new('%(Identity)').IndexOf ('-'))))</Platform>
			</_RuntimeIdentifiersAsItems>

			<!-- Verify that we're not mixing simulator + device RIDs in a single build -->
			<_RuntimeIdentifierPlatforms Include="@(_RuntimeIdentifiersAsItems -> '%(Platform)')" />
			<_RuntimeIdentifierDistinctPlatforms Include="@(_RuntimeIdentifierPlatforms->Distinct())" />
		</ItemGroup>

		<!-- Show an error if we're mixing simulator + device RIDs in a single build -->
		<Error Condition="@(_RuntimeIdentifierDistinctPlatforms->Count()) > 1" Text="Building for all the runtime identifiers '$(RuntimeIdentifiers)' at the same time isn't possible, because they represent different platform variations." />

		<PropertyGroup>
			<_RidSpecificProperties>
				_IsMultiRidBuild=true;
				RuntimeIdentifiers=;
				_ProcessedBundleResourcesPath=$(_ProcessedBundleResourcesPath);
				_ProcessedContentPath=$(_ProcessedContentPath);
				_ProcessedImageAssetsPath=$(_ProcessedImageAssetsPath);
				_ProcessedInterfaceDefinitionsPath=$(_ProcessedInterfaceDefinitionsPath);
				_ProcessedSceneKitAssetsPath=$(_ProcessedSceneKitAssetsPath);
				_ProcessedColladaAssetsPath=$(_ProcessedColladaAssetsPath);
				_ProcessedTextureAtlasesPath=$(_ProcessedTextureAtlasesPath);
				_ProcessedCoreMLModelsPath=$(_ProcessedCoreMLModelsPath);
			</_RidSpecificProperties>
		</PropertyGroup>

		<!-- Execute the inner builds -->
		<MSBuild
			Projects="$(MSBuildProjectFile)"
			Targets="_BuildRidSpecificAppBundle"
			Properties="RuntimeIdentifier=%(_RuntimeIdentifiersAsItems.Identity);$(_RidSpecificProperties)">
			<Output TaskParameter="TargetOutputs" ItemName="_AssemblyPublishDirectories" />
		</MSBuild>

		<!-- Set the RID-specific subdirectory as metadata -->
		<ItemGroup>
			<_AssemblyPublishDirectories>
				<SpecificSubDirectory>.xamarin/%(RuntimeIdentifier)</SpecificSubDirectory>
			</_AssemblyPublishDirectories>
			<_AssemblyPublishInputs Include="@(_AssemblyPublishDirectories -> '%(Identity)/**')" />
		</ItemGroup>
	</Target>

	<Target Name="_CreateMergedAppBundle"
		Inputs="@(_AssemblyPublishInputs)"
		Outputs="$(DeviceSpecificIntermediateOutputPath)$(_AppBundleName).mergestamp"
		DependsOnTargets="_RunRidSpecificBuild"
		>
		<ItemGroup>
			<!-- If we're creating a runtimeconfig.json file, then the resulting binary runtimeconfig.bin file can be put in the architecture-specific subdirectory -->
			<_ArchitectureSpecificFiles Include="$(_RuntimeConfigurationFile)" Condition="'$(GenerateRuntimeConfigurationFiles)' != ''" />
			<!-- The globalization data file can be put in the architecture-specific subdirectory -->
			<_ArchitectureSpecificFiles Include="$(_GlobalizationDataFile)" Condition="'$(_GlobalizationDataFile)' != ''" />
		</ItemGroup>

		<MergeAppBundles
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			ArchitectureSpecificFiles="@(_ArchitectureSpecificFiles)"
			IgnoreFiles="$(_AppBundleManifestRelativePath)Info.plist"
			InputAppBundles="@(_AssemblyPublishDirectories)"
			OutputAppBundle="$(_AppBundlePath)"
			SdkDevPath="$(_SdkDevPath)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
		/>

		<Touch
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			AlwaysCreate="true"
			Files="$(DeviceSpecificIntermediateOutputPath)$(_AppBundleName).mergestamp"
			>
			<Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
		</Touch>
	</Target>

	<Target Name="_ComputeMonoComponents" Condition="'$(UseMonoRuntime)' == 'true' And '$(_LibMonoLinkMode)' == 'static'" BeforeTargets="_MonoSelectRuntimeComponents" DependsOnTargets="_ComputeVariables">
		<!-- https://github.com/dotnet/runtime/blob/main/docs/design/mono/components.md -->
		<ItemGroup>
			<_MonoComponent Include="hot_reload" Condition="'$(MtouchInterpreter)' == 'true'" />
			<_MonoComponent Include="debugger" Condition="'$(_BundlerDebug)' == 'true'" />
			<_MonoComponent Include="diagnostics_tracing" Condition="'$(_BundlerDebug)' == 'true'" />
		</ItemGroup>
	</Target>

	<Target Name="_ComputeMonoLibraries" Condition="'$(UseMonoRuntime)' == 'true'" DependsOnTargets="_ComputeMonoComponents;_MonoSelectRuntimeComponents">
		<!-- We only include any mono components when linking with mono statically. The components are already included in the dynamic versions of Mono (both the dylib and the framework) -->
		<ItemGroup Condition="'$(_LibMonoLinkMode)' == 'static'">
			<!-- Remove files mono told us not to link with -->
			<_MonoLibrary Remove="@(_MonoRuntimeComponentDontLink -> '$(_MonoRuntimePackPath)native/%(Identity)')" />

			<!-- Add files mono told us to link with -->
			<_MonoLibrary Include="@(_MonoRuntimeComponentLink -> '$(_MonoRuntimePackPath)native/%(Identity)')" />
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<_ComputeLinkerArgumentsDependsOn>
			_ComputeLinkMode;
			_ComputeFrameworkVariables;
			_ComputeFrameworkAssemblies;
			ComputeResolvedFilesToPublishList;
			_ParseBundlerArguments;
			_ComputeVariables;
			_CreateRuntimeConfiguration;
			_ComputeMonoLibraries;
			_FindAotCompiler;
			_DetectAppManifest;
			_ReadAppManifest;
			_WriteAppManifest;
		</_ComputeLinkerArgumentsDependsOn>
	</PropertyGroup>

	<Target Name="_ComputeLinkerArguments" DependsOnTargets="$(_ComputeLinkerArgumentsDependsOn)">
		<!-- Validate the linker mode -->
		<Error Text="Invalid link mode: '$(_LinkMode)'. Valid link modes are: 'None', 'SdkOnly' and 'Full'" Condition="'$(_LinkMode)' != 'None' And '$(_LinkMode)' != 'SdkOnly' And '$(_LinkMode)' != 'Full' And '$(_LinkMode)' != 'TrimMode'" />

		<!-- it's invariant or it's one of the ICU data files, not both -->
		<Error Text="Can not set values for both InvariantGlobalization '$(InvariantGlobalization)' and _GlobalizationDataFile '$(_GlobalizationDataFile)'" Condition="'$(_GlobalizationDataFile)' != '' And '$(InvariantGlobalization)' == 'true'" />

		<PropertyGroup>
			<!-- Pass the custom options to our custom steps -->
			<_CustomLinkerOptionsFile>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)custom-linker-options.txt'))</_CustomLinkerOptionsFile>
			<_CustomLinkerOptionsFile Condition="'$(BuildSessionId)' != ''">$(IntermediateOutputPath)custom-linker-options.txt</_CustomLinkerOptionsFile>

			<!-- The directory where the linker puts *.items files that will be loaded in the _LoadLinkerOutput target -->
			<_LinkerItemsDirectory>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)linker-items'))</_LinkerItemsDirectory>
			<_LinkerItemsDirectory Condition="'$(BuildSessionId)' != ''">$(IntermediateOutputPath)linker-items</_LinkerItemsDirectory>

			<!-- A temporary output directory for our linker steps -->
			<_LinkerCacheDirectory>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)linker-cache'))</_LinkerCacheDirectory>
			<_LinkerCacheDirectory Condition="'$(BuildSessionId)' != ''">$(IntermediateOutputPath)linker-cache</_LinkerCacheDirectory>

			<_XamarinRuntime Condition="'$(UseMonoRuntime)' == 'true'">MonoVM</_XamarinRuntime>
			<_XamarinRuntime Condition="'$(UseMonoRuntime)' != 'true'">CoreCLR</_XamarinRuntime>

			<!-- TrimMode specifies what the linker will do with framework assemblies -->
			<TrimMode Condition="'$(_LinkMode)' == 'TrimMode'">$(TrimMode)</TrimMode>
			<TrimMode Condition="'$(_LinkMode)' == 'None'">copy</TrimMode> <!-- Don't use 'copyused', because that might still end up saving some assemblies, and if that's the platform assembly, it may break the partial static registrar -->
			<TrimMode Condition="'$(_LinkMode)' == 'SdkOnly' Or '$(_LinkMode)' == 'Full'">link</TrimMode>
			<!-- For Full link mode we also need to set TrimMode for all non-framework assemblies. This is done further below -->

			<!-- Determine if any assemblies are actually trimmed, or if we're in a "Don't link" scenario -->
			<!-- We're in a "Don't link" scenario if both of the following are true:
				 1. The global TrimMode property is set to 'copy'
				 2. No assembly has the TrimMode metadata (unless it's set to 'copy')
			-->
			<_AssembliesWithCustomTrimMode>@(ManagedAssemblyToLink->HasMetadataValue('TrimMode')->Count())</_AssembliesWithCustomTrimMode>
			<_AssembliesWithCopyTrimMode>@(ManagedAssemblyToLink->WithMetadataValue('TrimMode', 'copy')->Count())</_AssembliesWithCopyTrimMode>
			<_AreAnyAssembliesTrimmed Condition="'$(_AreAnyAssembliesTrimmed)' == '' And '$(TrimMode)' == 'copy' And '$(_AssembliesWithCustomTrimMode)' == '$(_AssembliesWithCopyTrimMode)'">false</_AreAnyAssembliesTrimmed>
			<_AreAnyAssembliesTrimmed Condition="'$(_AreAnyAssembliesTrimmed)' == ''">true</_AreAnyAssembliesTrimmed>

			<_CustomLinkerOptions>
				AreAnyAssembliesTrimmed=$(_AreAnyAssembliesTrimmed)
				AssemblyName=$(AssemblyName).dll
				AOTCompiler=$(_AOTCompiler)
				AOTOutputDirectory=$(_AOTOutputDirectory)
				CacheDirectory=$(_LinkerCacheDirectory)
				@(_BundlerDlsym -> 'Dlsym=%(Identity)')
				Debug=$(_BundlerDebug)
				DeploymentTarget=$(_MinimumOSVersion)
				@(_CustomLinkFlags -> 'CustomLinkFlags=%(Identity)')
				EnableSGenConc=$(EnableSGenConc)
				@(_BundlerEnvironmentVariables -> 'EnvironmentVariable=%(Identity)=%(Value)')
				@(_XamarinFrameworkAssemblies -> 'FrameworkAssembly=%(Filename)')
				GlobalizationDataFile=$(_GlobalizationDataFile)
				Interpreter=$(MtouchInterpreter)
				IntermediateLinkDir=$(IntermediateLinkDir)
				InvariantGlobalization=$(InvariantGlobalization)
				ItemsDirectory=$(_LinkerItemsDirectory)
				IsSimulatorBuild=$(_SdkIsSimulator)
				LibMonoLinkMode=$(_LibMonoLinkMode)
				LibXamarinLinkMode=$(_LibXamarinLinkMode)
				MarshalManagedExceptionMode=$(_MarshalManagedExceptionMode)
				MarshalObjectiveCExceptionMode=$(_MarshalObjectiveCExceptionMode)
				@(_MonoLibrary -> 'MonoLibrary=%(Identity)')
				MtouchFloat32=$(MtouchFloat32)
				Optimize=$(_BundlerOptimize)
				PartialStaticRegistrarLibrary=$(_LibPartialStaticRegistrar)
				Platform=$(_PlatformName)
				PlatformAssembly=$(_PlatformAssemblyName).dll
				RelativeAppBundlePath=$(_RelativeAppBundlePath)
				Registrar=$(_BundlerRegistrar)
				RuntimeConfigurationFile=$(_RuntimeConfigurationFile)
				SdkDevPath=$(_SdkDevPath)
				SdkRootDirectory=$(_XamarinSdkRootDirectory)
				SdkVersion=$(_SdkVersion)
				TargetArchitectures=$(TargetArchitectures)
				TargetFramework=$(_ComputedTargetFrameworkMoniker)
				UseLlvm=$(MtouchUseLlvm)
				Verbosity=$(_BundlerVerbosity)
				XamarinRuntime=$(_XamarinRuntime)
			</_CustomLinkerOptions>
			<_ExtraTrimmerArgs>$(_ExtraTrimmerArgs) --custom-data "LinkerOptionsFile=$(_CustomLinkerOptionsFile)"</_ExtraTrimmerArgs>
			<_ExtraTrimmerArgs Condition="'$(TrimMode)' == 'copy' And '$(MarkCopiedAssemblies)' != 'true'">$(_ExtraTrimmerArgs) --custom-data DisableMarkingOfCopyAssemblies=true</_ExtraTrimmerArgs>

			<!-- Verbose output, so that we get something to stdout when something goes wrong -->
			<_ExtraTrimmerArgs>$(_ExtraTrimmerArgs) --verbose</_ExtraTrimmerArgs>

			<!--
				Always process symbols files, even in release mode, because
				the AOT compiler uses the symbol files to create DWARF debug
				information.

				FIXME: At some point we should set the DebuggerSupport
				property so that the linker can remove debugging support when
				in release mode, but the linker doesn't seem quite ready for
				this yet (ref: https://github.com/dotnet/sdk/pull/12144).
			-->
			<_ExtraTrimmerArgs>$(_ExtraTrimmerArgs) -b</_ExtraTrimmerArgs>

			<!--

				The linker will treat type checks as a constant value (false),
				if the type in question is not instantiated, but we're
				instantiating types using reflection, which the linker can't
				see. The result is that the
				CIKernel_BasicTest/CIKernel_TestFromPrograms tests in
				monotouch-test fail.

				So here we disable this particular linker optimization.

				Ref: https://github.com/mono/linker/pull/1595
				Ref: https://discord.com/channels/732297728826277939/751137004007456849/776033084431925268

			-->
			<_ExtraTrimmerArgs>$(_ExtraTrimmerArgs) --disable-opt unusedtypechecks</_ExtraTrimmerArgs>

			<!-- If a release build and the app is not extensible (no interpreter or JIT/code-loading for macOS) then the sealer optimization can be used -->
			<_ExtraTrimmerArgs Condition="'$(_BundlerDebug)' != 'true' And '$(MtouchInterpreter)' == '' And '$(_RunAotCompiler)' == 'true' And '$(_PlatformName)' != 'macOS'">$(_ExtraTrimmerArgs) --enable-opt sealer</_ExtraTrimmerArgs>

			<!-- Set linker feature flags for device/simulator builds -->
			<_ExtraTrimmerArgs Condition="('$(_PlatformName)' == 'iOS' Or '$(_PlatformName)' == 'tvOS') And '$(_SdkIsSimulator)' == 'true'">$(_ExtraTrimmerArgs) --feature ObjCRuntime.Runtime.Arch.IsSimulator true</_ExtraTrimmerArgs>
			<_ExtraTrimmerArgs Condition="('$(_PlatformName)' == 'iOS' Or '$(_PlatformName)' == 'tvOS') And '$(_SdkIsSimulator)' != 'true'">$(_ExtraTrimmerArgs) --feature ObjCRuntime.Runtime.Arch.IsSimulator false</_ExtraTrimmerArgs>

			<!-- We always want the linker to process debug symbols, even when building in Release mode, because the AOT compiler uses the managed debug symbols to output DWARF debugging symbols -->
			<TrimmerRemoveSymbols Condition="'$(TrimmerRemoveSymbols)' == ''">false</TrimmerRemoveSymbols>

			<!-- Linker -->
			<_AdditionalTaskAssemblyDirectory>$(_XamarinSdkRootDirectoryOnMac)tools/dotnet-linker/</_AdditionalTaskAssemblyDirectory>
			<_AdditionalTaskAssembly>$(_AdditionalTaskAssemblyDirectory)dotnet-linker.dll</_AdditionalTaskAssembly>
		</PropertyGroup>

		<ItemGroup>
			<!-- Mark all assemblies to be linked if we're linking all assemblies -->
			<ResolvedFileToPublish
				Update="@(ResolvedFileToPublish)"
				Condition="'$(_LinkMode)' == 'Full' And '%(ResolvedFileToPublish.Extension)' == '.dll' And '%(ResolvedFileToPublish.AssetType)' != 'native'"
			>
				<TrimMode>link</TrimMode>
			</ResolvedFileToPublish>

			<!-- Mark our entry assembly as a root assembly. -->
			<TrimmerRootAssembly Include="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.Filename)' == '$(AssemblyName)' And '%(ResolvedFileToPublish.Extension)' == '.dll'" />

			<!--
				pre-mark custom steps
			-->
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" BeforeStep="MarkStep" Type="Xamarin.SetupStep" />
			<!-- Load the list of assemblies loaded by the linker. -->
			<!-- This would not be needed if LinkContext.GetAssemblies () was exposed to us. -->
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" BeforeStep="MarkStep" Type="Xamarin.Linker.CollectAssembliesStep" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" BeforeStep="MarkStep" Type="MonoTouch.Tuner.CoreTypeMapStep" />
			<!-- The final decision to remove/keep the dynamic registrar must be done before the linking step -->
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" BeforeStep="MarkStep" Type="MonoTouch.Tuner.RegistrarRemovalTrackingStep" />
			<!-- TODO: these steps should probably run after mark. -->
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" BeforeStep="MarkStep" Condition="'$(_AreAnyAssembliesTrimmed)' == 'true'" Type="Xamarin.Linker.Steps.PreMarkDispatcher" />

			<!--
				IMarkHandlers which run during Mark
			-->
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Condition="'$(_AreAnyAssembliesTrimmed)' == 'true'" Type="Xamarin.Linker.Steps.PreserveBlockCodeHandler" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Condition="'$(_AreAnyAssembliesTrimmed)' == 'true'" Type="Xamarin.Linker.OptimizeGeneratedCodeHandler" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Condition="'$(_AreAnyAssembliesTrimmed)' == 'true'" Type="Xamarin.Linker.BackingFieldDelayHandler" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Condition="'$(_AreAnyAssembliesTrimmed)' == 'true'" Type="Xamarin.Linker.MarkIProtocolHandler" />
			<!-- MarkDispatcher substeps will run for all marked assemblies. -->
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Condition="'$(_AreAnyAssembliesTrimmed)' == 'true'" Type="Xamarin.Linker.Steps.MarkDispatcher" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Condition="'$(_AreAnyAssembliesTrimmed)' == 'true'" Type="Xamarin.Linker.Steps.PreserveSmartEnumConversionsHandler" />

			<!--
				post-sweep custom steps
			-->
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" AfterStep="SweepStep" Condition="'$(_AreAnyAssembliesTrimmed)' == 'true'" Type="Xamarin.Linker.Steps.PostSweepDispatcher" />

			<!--
				pre-output custom steps
			-->
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" BeforeStep="OutputStep" Type="Xamarin.Linker.Steps.ListExportedSymbols" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" BeforeStep="OutputStep" Type="Xamarin.Linker.LoadNonSkippedAssembliesStep" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" BeforeStep="OutputStep" Type="Xamarin.Linker.ExtractBindingLibrariesStep" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" BeforeStep="OutputStep" Type="Xamarin.Linker.Steps.PreOutputDispatcher" />

			<!--
				post-output steps
			-->
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Type="Xamarin.Linker.RegistrarStep" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Type="Xamarin.GenerateMainStep" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Type="Xamarin.GenerateReferencesStep" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Type="Xamarin.GatherFrameworksStep" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Type="Xamarin.Linker.ComputeNativeBuildFlagsStep" />
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Type="Xamarin.Linker.ComputeAOTArguments" />
			<!-- Must be the last step. -->
			<_TrimmerCustomSteps Include="$(_AdditionalTaskAssembly)" Type="Xamarin.Linker.DoneStep" />

			<!-- _BundlerXmlDefinitions comes from any -xml arguments to mtouch/mmp -->
			<TrimmerRootDescriptor Include="@(_BundlerXmlDefinitions)" />
			<!-- LinkDescription can be defined in the user's csproj -->
			<TrimmerRootDescriptor Include="@(LinkDescription)" />
		</ItemGroup>

		<!-- Create the file with our custom linker options -->
		<WriteLinesToFile SessionId="$(BuildSessionId)" File="$(_CustomLinkerOptionsFile)" Lines="$(_CustomLinkerOptions)" Overwrite="true" />
	</Target>

	<PropertyGroup>
		<_ComputeFrameworkFilesToPublishDependsOn>
			$(_ComputeFrameworkFilesToPublishDependsOn);
			_DecompressAppleFrameworks;
			_CollectDecompressedAppleFrameworks;
			_DecompressAppleBindingResourcePackages;
			_CollectDecompressedAppleBindingResourcePackages;
			_ExpandNativeReferences;
			_ComputeVariables;
			_LoadLinkerOutput;
		</_ComputeFrameworkFilesToPublishDependsOn>
	</PropertyGroup>

	<!-- Look in the _FrameworkNativeReference items for frameworks that need to be added to the app bundle, and add all those frameworks to _FrameworkToPublish -->
	<Target Name="_ComputeFrameworkFilesToPublish" DependsOnTargets="$(_ComputeFrameworkFilesToPublishDependsOn)">
		<ItemGroup>
			<!-- Collect the list of frameworks to publish from _FrameworkNativeReference. The ExtractBindingLibrariesStep in the linker and
			     the _DecompressAppleFrameworks and _DecompressAppleBindingResourcePackages targets might also add frameworks to _FrameworkToPublish -->
			<_FrameworkToPublish Include="@(_FrameworkNativeReference)" Condition="'%(_FrameworkNativeReference.Kind)' == 'Framework' And '%(_FrameworkNativeReference.CopyToAppBundle)' != 'false'" />

			<!-- Set TargetDirectory and SourceDirectory for all frameworks we have to publish -->
			<_FrameworkToPublish Update="@(_FrameworkToPublish)">
				<TargetDirectory>$(_RelativePublishDir)$(_AppBundleFrameworksDir)\%(Filename).framework</TargetDirectory>
				<SourceDirectory>%(RootDir)%(Directory)</SourceDirectory>
			</_FrameworkToPublish>
		</ItemGroup>

		<!-- Figure out which frameworks are really dynamic libraries, and only publish those -->
		<FilterStaticFrameworks
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			FrameworkToPublish="@(_FrameworkToPublish)"
		>
			<Output TaskParameter="FrameworkToPublish" ItemName="_FilteredFrameworkToPublish" />
		</FilterStaticFrameworks>

		<ItemGroup>
			<_DirectoriesToPublish Include="@(_FilteredFrameworkToPublish)" />
		</ItemGroup>
	</Target>

	<Target Name="_CopyDirectoriesToBundle"
		DependsOnTargets="_CollectDecompressedPlugins;_ComputeFrameworkFilesToPublish"
		Inputs="@(_DirectoriesToPublish)"
		Outputs="@(_DirectoriesToPublish -> '%(TargetDirectory)/%(Filename)')"
		>
		<!-- We specifically do *not* use the publishing logic in .NET to (ResolvedFileToPublish) copy whole directories to the app bundle, because symlinks aren't handled correctly.
			 In particular, MSBuild can't handle symlinks to directories: https://github.com/dotnet/msbuild/issues/6821.
			 So we have a custom item group (_DirectoriesToPublish), which we copy ourselves.
		-->
		<Ditto
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			ToolExe="$(DittoExe)"
			ToolPath="$(DittoPath)"
			Source="%(_DirectoriesToPublish.SourceDirectory)"
			Destination="%(_DirectoriesToPublish.TargetDirectory)"
			TouchDestinationFiles="true"
		/>
	</Target>

	<!-- Look in the NativeReference items for dylibs that need to be added to the app bundle, and add all those frameworks to ResolvedFileToPublish (as separate files) -->
	<Target Name="_ComputeDynamicLibrariesToPublish" DependsOnTargets="_ExpandNativeReferences;_ComputeVariables;_LoadLinkerOutput">
		<ItemGroup>
			<!-- Support a 'CopyToAppBundle' metadata that can be set to 'false' to avoid copying a framework to the app bundle -->
			<_DynamicLibraryToPublish Include="@(_FileNativeReference)" Condition="'%(_FileNativeReference.Kind)' == 'Dynamic' And '%(_FileNativeReference.CopyToAppBundle)' != 'false'">
				<RelativePath>$(_DylibPublishDir)\%(Filename)%(Extension)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
			</_DynamicLibraryToPublish>

			<!-- Add all the dynamic libraries to ResolvedFileToPublish -->
			<ResolvedFileToPublish Include="@(_DynamicLibraryToPublish)">
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>

	<Target Name="_ComputeStripAssemblyIL" Condition=" '$(EnableAssemblyILStripping)' == '' " DependsOnTargets="_ComputeVariables;ComputeFilesToPublish">
		<PropertyGroup>
			<!-- Don't strip IL by default -->
			<EnableAssemblyILStripping>false</EnableAssemblyILStripping>

			<!-- Strip if we are AOT and Release  -->
			<EnableAssemblyILStripping Condition="'$(_RunAotCompiler)' == 'true' And '$(Configuration)' == 'Release'">true</EnableAssemblyILStripping>

			<!-- Don't strip if we are running the interpreter  -->
			<EnableAssemblyILStripping Condition="'$(MtouchInterpreter)' != ''">false</EnableAssemblyILStripping>
		</PropertyGroup>
	</Target>

	<!-- The DependsOnTargets here will not force EnableAssemblyILStripping to be calculated before the condition is evaulated. The order in CreateAppBundleDependsOn matters. -->
	<Target Name="_StripAssemblyIL" Condition="'$(EnableAssemblyILStripping)' == 'true'" DependsOnTargets="_ComputeStripAssemblyIL">
		<PropertyGroup>
			<_StrippedAssemblyDirectory>$(DeviceSpecificIntermediateOutputPath)\stripped</_StrippedAssemblyDirectory>
		</PropertyGroup>
		<ItemGroup>
			<_AssembliesToBeStripped Include="@(ResolvedFileToPublish)" Condition="'%(Extension)' == '.dll'">
				<OutputPath Condition="'%(ResolvedFileToPublish.DestinationSubPath)' != ''">$(_StrippedAssemblyDirectory)\%(ResolvedFileToPublish.DestinationSubPath)</OutputPath>
				<OutputPath Condition="'%(ResolvedFileToPublish.DestinationSubPath)' == ''">$(_StrippedAssemblyDirectory)\%(Filename)%(Extension)</OutputPath>
			</_AssembliesToBeStripped>

			<!-- Use forward slashes in OutputPath, otherwise ILStrip will create filenames that resemble the part of
				 the relative path of the item that uses backslashes, instead of writing the file to the location of the
				 relative path. -->
			<_AssembliesToBeStripped>
				<OutputPath>$([System.String]::Copy('%(OutputPath)').Replace('\', '/'))</OutputPath>
			</_AssembliesToBeStripped>

			<_AssemblyDirsToCreate Include="@(_AssembliesToBeStripped->'%(OutputPath)%(Directory)'->Distinct())"/>
		</ItemGroup>
		<MakeDir SessionId="$(BuildSessionId)" Condition="'$(IsMacEnabled)' == 'true'" Directories="@(_AssemblyDirsToCreate)" />
		<Xamarin.MacDev.Tasks.ILStrip Assemblies="@(_AssembliesToBeStripped)" SessionId="$(BuildSessionId)">
			<Output TaskParameter="StrippedAssemblies" ItemName="_StrippedAssemblies" />
		</Xamarin.MacDev.Tasks.ILStrip>
		<ItemGroup>
			<ResolvedFileToPublish Remove="@(_AssembliesToBeStripped)" />
			<ResolvedFileToPublish Include="@(_StrippedAssemblies)" />
		</ItemGroup>
	</Target>


	<Target Name="_LoadLinkerOutput" DependsOnTargets="ComputeFilesToPublish">
		<!-- Load _MainFile -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_MainFile.items" Condition="Exists('$(_LinkerItemsDirectory)/_MainFile.items')">
			<Output TaskParameter="Items" ItemName="_MainFile" />
		</ReadItemsFromFile>
		<!-- Load _MainLinkWith -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_MainLinkWith.items" Condition="Exists('$(_LinkerItemsDirectory)/_MainLinkWith.items')">
			<Output TaskParameter="Items" ItemName="_MainLinkWith" />
		</ReadItemsFromFile>
		<!-- Load _LinkerFrameworks -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_LinkerFrameworks.items" Condition="Exists('$(_LinkerItemsDirectory)/_LinkerFrameworks.items')">
			<Output TaskParameter="Items" ItemName="_LinkerFrameworks" />
		</ReadItemsFromFile>
		<!-- Load _BindingLibraryLinkWith -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_BindingLibraryLinkWith.items" Condition="Exists('$(_LinkerItemsDirectory)/_BindingLibraryLinkWith.items')">
			<Output TaskParameter="Items" ItemName="_BindingLibraryLinkWith" />
		</ReadItemsFromFile>
		<!-- Load _AssemblyLinkerFlags -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_AssemblyLinkerFlags.items" Condition="Exists('$(_LinkerItemsDirectory)/_AssemblyLinkerFlags.items')">
			<Output TaskParameter="Items" ItemName="_AssemblyLinkerFlags" />
		</ReadItemsFromFile>
		<!-- Load _MainLinkerFlags -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_MainLinkerFlags.items" Condition="Exists('$(_LinkerItemsDirectory)/_MainLinkerFlags.items')">
			<Output TaskParameter="Items" ItemName="_MainLinkerFlags" />
		</ReadItemsFromFile>
		<!-- Load _BindingLibraryFrameworks -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_BindingLibraryFrameworks.items" Condition="Exists('$(_LinkerItemsDirectory)/_BindingLibraryFrameworks.items')">
			<Output TaskParameter="Items" ItemName="_BindingLibraryFrameworks" />
		</ReadItemsFromFile>
		<!-- Load _RegistrarFile -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_RegistrarFile.items" Condition="Exists('$(_LinkerItemsDirectory)/_RegistrarFile.items')">
			<Output TaskParameter="Items" ItemName="_RegistrarFile" />
		</ReadItemsFromFile>
		<!-- Load _ReferencesFile -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_ReferencesFile.items" Condition="Exists('$(_LinkerItemsDirectory)/_ReferencesFile.items')">
			<Output TaskParameter="Items" ItemName="_ReferencesFile" />
		</ReadItemsFromFile>
		<!-- Load _ReferencesLinkerFlags -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_ReferencesLinkerFlags.items" Condition="Exists('$(_LinkerItemsDirectory)/_ReferencesLinkerFlags.items')">
			<Output TaskParameter="Items" ItemName="_ReferencesLinkerFlags" />
		</ReadItemsFromFile>
		<!-- Load _AssembliesToAOT -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_AssembliesToAOT.items" Condition="Exists('$(_LinkerItemsDirectory)/_AssembliesToAOT.items')">
			<Output TaskParameter="Items" ItemName="_AssembliesToAOT" />
		</ReadItemsFromFile>
		<!-- Load _FrameworkToPublish -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_FrameworkToPublish.items" Condition="Exists('$(_LinkerItemsDirectory)/_FrameworkToPublish.items')">
			<Output TaskParameter="Items" ItemName="_FrameworkToPublish" />
		</ReadItemsFromFile>
		<!-- Load _DynamicLibraryToPublish -->
		<ReadItemsFromFile SessionId="$(BuildSessionId)" File="$(_LinkerItemsDirectory)/_DynamicLibraryToPublish.items" Condition="Exists('$(_LinkerItemsDirectory)/_DynamicLibraryToPublish.items')">
			<Output TaskParameter="Items" ItemName="_DynamicLibraryToPublish" />
		</ReadItemsFromFile>
	</Target>

	<!-- Native code -->

	<Target Name="_ComputeFrameworkVariables" DependsOnTargets="ResolveRuntimePackAssets">
		<PropertyGroup>
			<_PackageIdInfix Condition="'$(UseMonoRuntime)' == 'true'">Mono.</_PackageIdInfix>

			<_MonoNugetPackageId>Microsoft.NETCore.App.Runtime.$(_PackageIdInfix)$(RuntimeIdentifier)</_MonoNugetPackageId>
			<_XamarinNugetPackageId>Microsoft.$(_PlatformName).Runtime.$(RuntimeIdentifier)</_XamarinNugetPackageId>
		</PropertyGroup>
		<ItemGroup>
			<!-- Look in the ResolvedFrameworkReference for our Microsoft.* package. This should only find a single package. -->
			<_XamarinFrameworkReference Include="@(ResolvedFrameworkReference)" Condition="'%(ResolvedFrameworkReference.Identity)' == 'Microsoft.$(_PlatformName)'" />
			<_MonoFrameworkReference Include="@(ResolvedFrameworkReference)" Condition="'%(ResolvedFrameworkReference.RuntimePackName)' == '$(_MonoNugetPackageId)'" />
		</ItemGroup>
		<PropertyGroup>
			<_XamarinSdkRuntimePackDirectory>%(_XamarinFrameworkReference.RuntimePackPath)</_XamarinSdkRuntimePackDirectory>
			<_XamarinRefPackageDirectory>%(_XamarinFrameworkReference.TargetingPackPath)</_XamarinRefPackageDirectory>
			<_XamarinNativeLibraryDirectory>$(_XamarinSdkRuntimePackDirectory)/runtimes/$(RuntimeIdentifier)/native</_XamarinNativeLibraryDirectory>
			<_XamarinIncludeDirectory>$(_XamarinSdkRuntimePackDirectory)/runtimes/$(RuntimeIdentifier)/native</_XamarinIncludeDirectory>
			<_XamarinRefAssemblyDirectory>$(_XamarinRefPackageDirectory)/ref/net6.0/</_XamarinRefAssemblyDirectory>
			<_XamarinRefAssemblyPath>$(_XamarinRefAssemblyDirectory)$(_PlatformAssemblyName).dll</_XamarinRefAssemblyPath>

			<_LibPartialStaticRegistrar Condition="'$(UseMonoRuntime)' == 'true'">$(_XamarinNativeLibraryDirectory)/Microsoft.$(_PlatformName).registrar.a</_LibPartialStaticRegistrar>
			<_LibPartialStaticRegistrar Condition="'$(UseMonoRuntime)' != 'true'">$(_XamarinNativeLibraryDirectory)/Microsoft.$(_PlatformName).registrar.coreclr.a</_LibPartialStaticRegistrar>

			<_MonoRuntimePackPath>%(_MonoFrameworkReference.RuntimePackPath)/runtimes/$(RuntimeIdentifier)/</_MonoRuntimePackPath>
		</PropertyGroup>
	</Target>

	<Target Name="_ComputeFrameworkAssemblies" DependsOnTargets="_ComputeVariables;ComputeResolvedFilesToPublishList">
		<ItemGroup>
			<!-- Define 'framework assembly' or 'sdk assembly' as assemblies that comes from the .NET BCL NuGet -->
			<_XamarinFrameworkAssemblies Include="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.Extension)' == '.dll' And '%(ResolvedFileToPublish.NuGetPackageId)' == '$(_MonoNugetPackageId)'" />
		</ItemGroup>
	</Target>

	<Target Name="_VerifyValidRuntime">
		<Error Text="Only CoreCLR is supported on macOS. Set 'UseMonoRuntime=false' to use CoreCLR." Condition="'$(_PlatformName)' == 'macOS' And '$(UseMonoRuntime)' != 'false'" />
	</Target>

	<PropertyGroup>
		<_ComputeVariablesDependsOn>
			_VerifyValidRuntime;
			_GenerateBundleName;
			_ComputeFrameworkVariables;
		</_ComputeVariablesDependsOn>
		<!--
			Don't execute ComputeResolvedFileToPublishList if we're in the
			outer build of a multi-rid build, because there's nothing to
			publish (except the merged app bundle, which we'll handle
			ourselves).
		-->
		<_ComputeVariablesDependsOn Condition="'$(RuntimeIdentifiers)' == ''">$(_ComputeVariablesDependsOn);ComputeResolvedFilesToPublishList</_ComputeVariablesDependsOn>
	</PropertyGroup>

	<Target Name="_ComputeVariables" DependsOnTargets="$(_ComputeVariablesDependsOn)">
		<PropertyGroup Condition="'$(_RunAotCompiler)' == ''">
			<!-- Don't run the AOT compiler by default -->
			<_RunAotCompiler>false</_RunAotCompiler>
			<!-- We need it for device builds for mobile platforms -->
			<_RunAotCompiler Condition="'$(_SdkIsSimulator)' != 'true' And '$(_PlatformName)' != 'macOS' And '$(_PlatformName)' != 'MacCatalyst'">true</_RunAotCompiler>
			<!-- We need it if the interpreter is enabled, no matter where -->
			<_RunAotCompiler Condition="'$(MtouchInterpreter)' != ''">true</_RunAotCompiler>
			<!-- We need it for Mac Catalyst on arm64 -->
			<_RunAotCompiler Condition="'$(RuntimeIdentifier)' == 'maccatalyst-arm64'">true</_RunAotCompiler>
			<!-- We need it for iOS/tvOS simulator on arm64 -->
			<_RunAotCompiler Condition="'$(RuntimeIdentifier)' == 'iossimulator-arm64' Or '$(RuntimeIdentifier)' == 'tvossimulator-arm64'">true</_RunAotCompiler>
		</PropertyGroup>

		<PropertyGroup>
			<!-- Compute the absolute path to the publish directory. We only use this to compute the relative path of app bundle path relative to the publish directory -->
			<!-- Take into account that 'PublishDir' may or may not be an absolute path to begin with -->
			<_AbsolutePublishDir>$(PublishDir)</_AbsolutePublishDir>
			<_AbsolutePublishDir Condition="!$([System.IO.Path]::IsPathRooted ('$(_AbsolutePublishDir)'))">$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)\$(PublishDir)'))</_AbsolutePublishDir>
			<!-- Compute the relative path to the publish directory ('PublishDir' is by default a relative path, but the developer might use an absolute path) -->
			<_RelativePublishDir>$([MSBuild]::MakeRelative($(MSBuildProjectDirectory),$(_AbsolutePublishDir)))</_RelativePublishDir>
			<_RelativePublishDir>$([MSBuild]::EnsureTrailingSlash($(_RelativePublishDir)))</_RelativePublishDir>
			<!-- Compute the relative path of the app bundle relative to the publish directory. The _AppBundlePath is relative to the project directory, so to compute this we need to have both app bundle path and the publish directory as absolute paths first. -->
			<_RelativeAppBundlePath>$([MSBuild]::MakeRelative($(_AbsolutePublishDir),$(MSBuildProjectDirectory)/$(_AppBundlePath)))</_RelativeAppBundlePath>

			<_IntermediateNativeLibraryDir>$(IntermediateOutputPath)nativelibraries/</_IntermediateNativeLibraryDir>
			<_IntermediateFrameworksDir>$(DeviceSpecificIntermediateOutputPath)frameworks</_IntermediateFrameworksDir>
			<_IntermediateDecompressionDir>$(DeviceSpecificIntermediateOutputPath)decompressed</_IntermediateDecompressionDir>
			<_NativeExecutableName>$(_AppBundleName)</_NativeExecutableName>
			<_NativeExecutablePublishDir Condition="'$(_PlatformName)' == 'iOS' Or '$(_PlatformName)' == 'tvOS' Or '$(_PlatformName)' == 'watchOS'">$(_RelativeAppBundlePath)\</_NativeExecutablePublishDir>
			<_NativeExecutablePublishDir Condition="'$(_PlatformName)' == 'macOS' Or '$(_PlatformName)' == 'MacCatalyst'">$(_RelativeAppBundlePath)\Contents\MacOS\</_NativeExecutablePublishDir>
			<_AppBundleFrameworksDir Condition="'$(_PlatformName)' == 'iOS' Or '$(_PlatformName)' == 'tvOS' Or '$(_PlatformName)' == 'watchOS'">$(_RelativeAppBundlePath)\Frameworks\</_AppBundleFrameworksDir>
			<_AppBundleFrameworksDir Condition="'$(_PlatformName)' == 'macOS' Or '$(_PlatformName)' == 'MacCatalyst'">$(_RelativeAppBundlePath)\Contents\Frameworks\</_AppBundleFrameworksDir>

			<_AOTInputDirectory>$(_IntermediateNativeLibraryDir)aot-input/</_AOTInputDirectory>
			<_AOTOutputDirectory>$(_IntermediateNativeLibraryDir)aot-output/</_AOTOutputDirectory>

			<_LibMonoLinkMode Condition="'$(_LibMonoLinkMode)' == '' And ('$(ComputedPlatform)' != 'iPhone' Or '$(_PlatformName)' == 'macOS')">dylib</_LibMonoLinkMode>
			<_LibMonoLinkMode Condition="'$(_LibMonoLinkMode)' == ''">static</_LibMonoLinkMode>
			<_LibMonoExtension Condition="'$(_LibMonoLinkMode)' == 'dylib'">dylib</_LibMonoExtension>
			<_LibMonoExtension Condition="'$(_LibMonoLinkMode)' == 'static'">a</_LibMonoExtension>

			<_LibXamarinLinkMode Condition="'$(_LibXamarinLinkMode)' == '' And '$(ComputedPlatform)' != 'iPhone' And '$(_PlatformName)' != 'macOS'">dylib</_LibXamarinLinkMode>
			<_LibXamarinLinkMode Condition="'$(_LibXamarinLinkMode)' == ''">static</_LibXamarinLinkMode>
			<_LibXamarinExtension Condition="'$(_LibXamarinLinkMode)' == 'dylib'">dylib</_LibXamarinExtension>
			<_LibXamarinExtension Condition="'$(_LibXamarinLinkMode)' == 'static'">a</_LibXamarinExtension>
			<_LibXamarinRuntime Condition="'$(UseMonoRuntime)' != 'true'">-coreclr</_LibXamarinRuntime>
			<_LibXamarinDebug Condition="'$(_BundlerDebug)' == 'true'">-debug</_LibXamarinDebug>
			<_LibXamarinName Condition="'$(_LibXamarinName)' == ''">libxamarin-dotnet$(_LibXamarinRuntime)$(_LibXamarinDebug).$(_LibXamarinExtension)</_LibXamarinName>

			<_DylibRPath Condition="'$(_PlatformName)' == 'iOS' Or '$(_PlatformName)' == 'tvOS' Or '$(_PlatformName)' == 'watchOS'">@executable_path</_DylibRPath>
			<_DylibRPath Condition="'$(_PlatformName)' == 'macOS' Or '$(_PlatformName)' == 'MacCatalyst'">@executable_path/../$(_CustomBundleName)/</_DylibRPath>

			<_EmbeddedFrameworksRPath Condition="'$(_PlatformName)' == 'iOS' Or '$(_PlatformName)' == 'tvOS' Or '$(_PlatformName)' == 'watchOS'">@executable_path/Frameworks</_EmbeddedFrameworksRPath>
			<_EmbeddedFrameworksRPath Condition="'$(_PlatformName)' == 'macOS' Or '$(_PlatformName)' == 'MacCatalyst'">@executable_path/../Frameworks/</_EmbeddedFrameworksRPath>

			<_RuntimeConfigurationFile>runtimeconfig.bin</_RuntimeConfigurationFile>
		</PropertyGroup>

		<ItemGroup>
			<!-- Select the native libraries from mono we need to link with and potentially copy into the app -->
			<_MonoLibrary
				Include="@(ResolvedFileToPublish)"
				Condition=" '%(ResolvedFileToPublish.AssetType)' == 'native' And
							'%(ResolvedFileToPublish.RuntimeIdentifier)' == '$(RuntimeIdentifier)' And
							'%(ResolvedFileToPublish.Extension)' == '.$(_LibMonoExtension)' And
							'%(ResolvedFileToPublish.NuGetPackageId)' == '$(_MonoNugetPackageId)'
							"
			/>
		</ItemGroup>
	</Target>

	<!-- App bundle creation tasks -->

	<Target Name="_CreateRuntimeConfiguration"
		Inputs="$(ProjectRuntimeConfigFilePath)"
		Outputs="$(_ParsedRuntimeConfigFilePath)"
		DependsOnTargets="GenerateBuildRuntimeConfigurationFiles;_ComputePublishLocation"
		>
		<ItemGroup>
			<!-- List all the properties passed to xamarin_bridge_vm_initialize in xamarin_vm_initialize (in runtime.m) -->
			<_RuntimeConfigReservedProperties Include="APP_PATHS" />
			<_RuntimeConfigReservedProperties Include="PINVOKE_OVERRIDE" />
			<_RuntimeConfigReservedProperties Include="ICU_DAT_FILE_PATH" />
			<_RuntimeConfigReservedProperties Include="TRUSTED_PLATFORM_ASSEMBLIES" />
			<_RuntimeConfigReservedProperties Include="NATIVE_DLL_SEARCH_DIRECTORIES" />
			<_RuntimeConfigReservedProperties Include="RUNTIME_IDENTIFIER" />
			<_RuntimeConfigReservedProperties Include="APP_CONTEXT_BASE_DIRECTORY" />
		</ItemGroup>
		<RuntimeConfigParserTask
			Condition="'$(GenerateRuntimeConfigurationFiles)' == 'true'"
			RuntimeConfigFile="$(ProjectRuntimeConfigFilePath)"
			OutputFile="$(_ParsedRuntimeConfigFilePath)"
			RuntimeConfigReservedProperties="@(_RuntimeConfigReservedProperties)"
			>
		</RuntimeConfigParserTask>

		<Warning Condition="'$(GenerateRuntimeConfigurationFiles)' != 'true'" Text="Some features may not work correctly, because the generation of the runtime configure file (*.runtimeconfig.json) has been disabled." />
	</Target>

	<Target Name="_FindAotCompiler" DependsOnTargets="_ComputeVariables">
		<FindAotCompiler
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true' And '$(_RunAotCompiler)' == 'true'"
			MonoAotCrossCompiler="@(MonoAotCrossCompiler)"
			RuntimeIdentifier="$(RuntimeIdentifier)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
		>
			<Output TaskParameter="AotCompiler" PropertyName="_AOTCompiler" />
		</FindAotCompiler>
	</Target>

	<PropertyGroup>
		<_AOTCompileDependsOn>
			$(_AOTCompileDependsOn);
			_ComputeVariables;
			_FindAotCompiler;
			_DetectAppManifest;
			_ReadAppManifest;
			_WriteAppManifest;
		</_AOTCompileDependsOn>
	</PropertyGroup>
	<Target Name="_AOTCompile"
			Condition="'$(_RunAotCompiler)' == 'true'"
			DependsOnTargets="$(_AOTCompileDependsOn)"
			Inputs="@(_AssembliesToAOT)"
			Outputs="@(_AssembliesToAOT -> '%(ObjectFile)');@(_AssembliesToAOT -> '%(LLVMFile)');">

		<AOTCompile
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			Assemblies="@(_AssembliesToAOT)"
			AOTCompilerPath="$(_AOTCompiler)"
			InputDirectory="$(_AOTInputDirectory)"
			MinimumOSVersion="$(_MinimumOSVersion)"
			OutputDirectory="$(_AOTOutputDirectory)\%(_AssembliesToAOT.Arch)"
			SdkDevPath="$(_SdkDevPath)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
		>
			<Output TaskParameter="AssemblyFiles" ItemName="_AOTAssemblyFiles" />
			<Output TaskParameter="FileWrites" ItemName="FileWrites" />
		</AOTCompile>

		<CompileNativeCode
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			CompileInfo="@(_AOTAssemblyFiles)"
			MinimumOSVersion="$(_MinimumOSVersion)"
			SdkDevPath="$(_SdkDevPath)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			SdkRoot="$(_SdkRoot)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
		>
		</CompileNativeCode>

		<ItemGroup Condition="'$(IsMacEnabled)' == 'true'">
			<!-- Add the AOT-compiled output to the main executable -->
			<_XamarinMainLibraries Include="@(_AssembliesToAOT -> '%(ObjectFile)')" />
			<_XamarinMainLibraries Include="@(_AssembliesToAOT -> '%(LLVMFile)')" />

			<!-- copy the aotdata files to the .app -->
			<ResolvedFileToPublish Include="%(_AssembliesToAOT.AOTData)" >
				<RelativePath>$(_AssemblyPublishDir)\%(_AssembliesToAOT.Filename).aotdata.%(_AssembliesToAOT.Arch)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<_GenerateBindingsDependsOn>
			_ComputeBindingVariables;
			$(_GenerateBindingsDependsOn);
		</_GenerateBindingsDependsOn>
	</PropertyGroup>

	<Target Name="_ComputeBindingVariables" DependsOnTargets="_ComputeFrameworkVariables" Condition="'$(IsBindingProject)' == 'true'">
		<PropertyGroup>
			<BTouchToolExe>bgen.dll</BTouchToolExe>
			<BTouchToolPath>$(_XamarinSdkRootDirectory)\tools\lib\bgen</BTouchToolPath>
			<BaseLibDllPath>$(_XamarinRefAssemblyPath)</BaseLibDllPath>
			<_GeneratorAttributeAssembly>$(_XamarinSdkRootDirectory)/tools/lib/Xamarin.Apple.BindingAttributes.dll</_GeneratorAttributeAssembly>
		</PropertyGroup>
	</Target>

	<Target Name="_ComputeNativeExecutableInputs" DependsOnTargets="_ComputeVariables">
		<ItemGroup>
			<_CompileNativeExecutableFile Include="@(_MainFile)">
				<OutputFile>$(_IntermediateNativeLibraryDir)%(Filename).o</OutputFile>
			</_CompileNativeExecutableFile>
			<_CompileNativeExecutableFile Include="@(_RegistrarFile)">
				<OutputFile>$(_IntermediateNativeLibraryDir)%(Filename).o</OutputFile>
			</_CompileNativeExecutableFile>
			<_CompileNativeExecutableFile Include="@(_ReferencesFile)">
				<OutputFile>$(_IntermediateNativeLibraryDir)%(Filename).o</OutputFile>
			</_CompileNativeExecutableFile>
			<_XamarinMainIncludeDirectory Include="$(_XamarinIncludeDirectory)" />
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<_CompileNativeExecutableDependsOn>
			$(_CompileNativeExecutableDependsOn);
			_DetectSdkLocations;
			_ComputeTargetArchitectures;
			_GenerateBundleName;
			_DetectAppManifest;
			_ReadAppManifest;
			_WriteAppManifest;
			_ComputeNativeExecutableInputs;
			_AOTCompile;
		</_CompileNativeExecutableDependsOn>
	</PropertyGroup>

	<Target Name="_CompileNativeExecutable"
		DependsOnTargets="$(_CompileNativeExecutableDependsOn)"
		Inputs="@(_CompileNativeExecutableFile)"
		Outputs="@(_CompileNativeExecutableFile -> '%(OutputFile)')"
		>

		<MakeDir SessionId="$(BuildSessionId)" Condition="'$(IsMacEnabled)' == 'true'" Directories="$(_IntermediateNativeLibraryDir)" />

		<CompileNativeCode
			SessionId="$(BuildSessionId)"
			CompileInfo="@(_CompileNativeExecutableFile)"
			MinimumOSVersion="$(_MinimumOSVersion)"
			IncludeDirectories="@(_XamarinMainIncludeDirectory)"
			SdkDevPath="$(_SdkDevPath)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			SdkRoot="$(_SdkRoot)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
		>
		</CompileNativeCode>

		<ItemGroup>
			<_NativeExecutableObjectFiles Include="@(_CompileNativeExecutableFile -> '%(OutputFile)')" />
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<_LinkNativeExecutableDependsOn>
			$(_LinkNativeExecutableDependsOn);
			_DetectSdkLocations;
			_ComputeTargetArchitectures;
			_GenerateBundleName;
			_DetectAppManifest;
			_ReadAppManifest;
			_WriteAppManifest;
			_CompileNativeExecutable;
			_ComputeLinkNativeExecutableInputs;
		</_LinkNativeExecutableDependsOn>
	</PropertyGroup>

	<Target Name="_ComputeLinkNativeExecutableInputs">
		<ItemGroup Condition="'$(IsMacEnabled)' == 'true'">
			<_XamarinMainLibraries Include="$(_XamarinNativeLibraryDirectory)/$(_LibXamarinName)" />
			<!-- Link with the libraries shipped with the mono runtime pack -->
			<_XamarinMainLibraries Include="@(_MonoLibrary)" />

			<!-- The frameworks we need to link with (both weakly and normally) -->
			<_NativeExecutableFrameworks Include="@(_LinkerFrameworks)" />

			<!-- CFNetwork is required by xamarin_start_wwan -->
			<_NativeExecutableFrameworks Include="CFNetwork" Condition="'$(_PlatformName)' == 'iOS'" />

			<!-- Mono requires zlib, iconv, and the "Compression framework" -->
			<_MainLinkerFlags Include="-lz" />
			<_MainLinkerFlags Include="-liconv" />
			<_MainLinkerFlags Include="-lcompression" />

			<!-- Here we must add all the files that should make us (re-)link the executable -->
			<_LinkNativeExecutableInputs Include="@(_NativeExecutableObjectFiles)" />
			<_LinkNativeExecutableInputs Include="@(_XamarinMainLibraries)" />
			<_LinkNativeExecutableInputs Include="@(_FileNativeReference)" />
		</ItemGroup>
	</Target>

	<Target Name="_LinkNativeExecutable"
			DependsOnTargets="$(_LinkNativeExecutableDependsOn)"
			Inputs="@(_LinkNativeExecutableInputs)"
			Outputs="$(_IntermediateNativeLibraryDir)$(_NativeExecutableName)"
		>

		<LinkNativeCode
			SessionId="$(BuildSessionId)"
			DylibRPath="$(_DylibRPath)"
			EntitlementsInExecutable="$(_CompiledEntitlements)"
			FrameworkRPath="$(_EmbeddedFrameworksRPath)"
			Frameworks="@(_NativeExecutableFrameworks);@(_BindingLibraryFrameworks)"
			LinkerFlags="@(_AssemblyLinkerFlags);@(_ReferencesLinkerFlags);@(_MainLinkerFlags);@(_CustomLinkFlags)"
			LinkWithLibraries="@(_XamarinMainLibraries);@(_BindingLibraryLinkWith);@(_MainLinkWith)"
			MinimumOSVersion="$(_MinimumOSVersion)"
			NativeReferences="@(_FileNativeReference);@(_FrameworkNativeReference)"
			ObjectFiles="@(_NativeExecutableObjectFiles)"
			OutputFile="$(_IntermediateNativeLibraryDir)$(_NativeExecutableName)"
			SdkDevPath="$(_SdkDevPath)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			SdkRoot="$(_SdkRoot)"
			TargetArchitectures="$(TargetArchitectures)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
		/>

		<!-- remove the `-u` prefix from `_ReferencesLinkerFlags` so we can give the output file to `strip` -->
		<WriteLinesToFile SessionId="$(BuildSessionId)" File="$(_MtouchSymbolsList)" Lines="@(_ReferencesLinkerFlags->'%(Identity)'->Substring (2))" Overwrite="true" />

		<SymbolStrip
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true' And '$(_NoSymbolStrip)' == 'false' And '$(IsAppExtension)' == 'false'"
			Executable="$(_IntermediateNativeLibraryDir)$(_NativeExecutableName)"
			IsFramework="false"
			SymbolFile="$(_MtouchSymbolsList)"
		/>

		<ItemGroup>
			<!-- Copy the executable from the intermediate directory to the .app -->
			<ResolvedFileToPublish Include="$(_IntermediateNativeLibraryDir)$(_NativeExecutableName)">
				<RelativePath>$(_NativeExecutablePublishDir)\$(_NativeExecutableName)</RelativePath>
				<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
			</ResolvedFileToPublish>
		</ItemGroup>
	</Target>

	<Target Name="_ComputeDefaultLinkMode" DependsOnTargets="_DetectSdkLocations">
		<PropertyGroup Condition="'$(TrimMode)' != ''">
			<!-- If TrimMode is set, then that's the default link mode -->
			<_DefaultLinkMode>TrimMode</_DefaultLinkMode>
		</PropertyGroup>
		<PropertyGroup Condition="'$(TrimMode)' == ''">
			<_DefaultLinkMode Condition="'$(_PlatformName)' == 'macOS'">None</_DefaultLinkMode> <!-- Linking is off by default for macOS apps -->
			<_DefaultLinkMode Condition="'$(_PlatformName)' == 'MacCatalyst' And '$(Configuration)' == 'Release'">SdkOnly</_DefaultLinkMode> <!-- Default linking is on for release builds for Mac Catalyst apps -->
			<_DefaultLinkMode Condition="'$(_PlatformName)' == 'MacCatalyst' And '$(Configuration)' != 'Release'">None</_DefaultLinkMode> <!-- Default linking is off for non-release builds for Mac Catalyst apps -->
			<_DefaultLinkMode Condition="'$(_PlatformName)' != 'macOS' And '$(_PlatformName)' != 'MacCatalyst' And '$(_SdkIsSimulator)' == 'true'">None</_DefaultLinkMode> <!-- Linking is off by default in the simulator -->
			<_DefaultLinkMode Condition="'$(_PlatformName)' != 'macOS' And '$(_PlatformName)' != 'MacCatalyst' And '$(_SdkIsSimulator)' != 'true'">SdkOnly</_DefaultLinkMode> <!-- Linking is SdkOnly for iOS/tvOS/watchOS apps on device -->
		</PropertyGroup>
	</Target>
	<PropertyGroup>
		<_ComputeLinkModeDependsOn>
			$(_ComputeLinkModeDependsOn);
			_ComputeDefaultLinkMode;
		</_ComputeLinkModeDependsOn>
	</PropertyGroup>

	<Target Name="_ComputePublishLocation"
		DependsOnTargets="_GenerateBundleName;_ParseBundlerArguments;_ComputeMonoLibraries"
		Condition="'$(_CanOutputAppBundle)' == 'true'"
		>
		<PropertyGroup>
			<_AssemblyPublishDir Condition="'$(_PlatformName)' == 'iOS' Or '$(_PlatformName)' == 'tvOS' Or '$(_PlatformName)' == 'watchOS'">$(_RelativeAppBundlePath)\</_AssemblyPublishDir>
			<_AssemblyPublishDir Condition="'$(_PlatformName)' == 'macOS' Or '$(_PlatformName)' == 'MacCatalyst'">$(_RelativeAppBundlePath)\Contents\$(_CustomBundleName)\</_AssemblyPublishDir>
			<_DylibPublishDir Condition="'$(_PlatformName)' == 'iOS' Or '$(_PlatformName)' == 'tvOS' Or '$(_PlatformName)' == 'watchOS'">$(_RelativeAppBundlePath)\</_DylibPublishDir>
			<_DylibPublishDir Condition="'$(_PlatformName)' == 'macOS' Or '$(_PlatformName)' == 'MacCatalyst'">$(_RelativeAppBundlePath)\Contents\$(_CustomBundleName)\</_DylibPublishDir>
			<!-- _ParsedRuntimeConfigFilePath must be relative to the project directory, since it's not copied to the publish directory by the the CopyFilesToPublishDirectory targets -->
			<_ParsedRuntimeConfigFilePath Condition="'$(_ParsedRuntimeConfigFilePath)' == ''">$([MSBuild]::MakeRelative($(MSBuildProjectDirectory),$(_AbsolutePublishDir)\$(_AssemblyPublishDir)\$(_RuntimeConfigurationFile)))</_ParsedRuntimeConfigFilePath>
		</PropertyGroup>
		<ItemGroup>
			<!--
				Remove any items we've already handled elsewhere
			-->
			<ResolvedFileToPublish Remove="@(_BundleResourceWithOutputPath)" />

			<!-- include .dll, .exe and, for debugging only, .pdb files inside the .app -->
			<ResolvedFileToPublish
				Update="@(ResolvedFileToPublish)"
				RelativePath="$(_AssemblyPublishDir)\%(ResolvedFileToPublish.DestinationSubDirectory)\%(Filename)%(Extension)"
				Condition="'%(Extension)' == '.dll' Or ('$(_BundlerDebug)' == 'true' And '%(Extension)' == '.pdb') Or '%(Extension)' == '.exe'" />
			<!-- Copy the app.config file to the app bundle -->
			<ResolvedFileToPublish
				Update="@(ResolvedFileToPublish)"
				RelativePath="$(_AssemblyPublishDir)\%(ResolvedFileToPublish.DestinationSubDirectory)\%(ResolvedFileToPublish.TargetPath)"
				Condition="'$(AppConfig)' != '' And '%(ResolvedFileToPublish.OriginalItemSpec)' == '$(AppConfig)' And '%(ResolvedFileToPublish.Link)' == 'app.config' And '%(ResolvedFileToPublish.TargetPath)' != ''" />
			<!-- .dylib are never needed (nor allowed) for fully AOT'ed applications FIXME https://github.com/xamarin/xamarin-macios/issues/11145 -->
			<ResolvedFileToPublish
				Update="@(ResolvedFileToPublish)"
				RelativePath="$(_DylibPublishDir)\%(Filename)%(Extension)"
				Condition="('$(_SdkIsSimulator)' != 'false' Or '$(_PlatformName)' == 'macOS' Or '$(_PlatformName)' == 'MacCatalyst') And '%(Extension)' == '.dylib'" />

			<!-- Don't publish any icu*dat file (by setting PublishFolderType = None) -->
			<ResolvedFileToPublish
				Update="@(ResolvedFileToPublish)"
				Condition=" '%(ResolvedFileToPublish.Extension)' == '.dat' And
				             $([System.String]::new('%(ResolvedFileToPublish.Filename)').StartsWith('icudt')) And
				            '%(ResolvedFileToPublish.NuGetPackageId)' == '$(_MonoNugetPackageId)'
				            "
				PublishFolderType="None"
			/>
			<!-- add back the one we want (if any) - macOS is using CoreCLR, so that's not handled here -  by setting PublishFolderType = Assembly (so that it's next to where we store the assemblies, which is where we're currently looking for it at runtime) -->
			<ResolvedFileToPublish
				Update="@(ResolvedFileToPublish)"
				RelativePath="$(_AssemblyPublishDir)\%(Filename)%(Extension)"
				Condition=" '$(_PlatformName)' != 'macOS' And
				            '$(InvariantGlobalization)' != 'true' And
				            '%(ResolvedFileToPublish.Filename)%(ResolvedFileToPublish.Extension)' == '$(_GlobalizationDataFile)' And
				            '%(ResolvedFileToPublish.NuGetPackageId)' == '$(_MonoNugetPackageId)'
				            "
				PublishFolderType="Assembly"
			/>

			<!-- Remove the libxamarin-*.dylib files we don't want -->
			<ResolvedFileToPublish Remove="@(ResolvedFileToPublish)" Condition="'%(Extension)' == '.dylib' And '%(Filename)%(Extension)' != '$(_LibXamarinName)' And $([System.String]::new('%(Filename)').StartsWith('libxamarin-dotnet', StringComparison.Ordinal))" />

			<!-- Remove the runtime dylibs if we're linking the runtime statically -->
			<ResolvedFileToPublish
				Remove="@(ResolvedFileToPublish)"
				Condition=" '$(_LibMonoExtension)' != 'dylib' And
				            '%(ResolvedFileToPublish.AssetType)' == 'native' And
				            '%(ResolvedFileToPublish.RuntimeIdentifier)' == '$(RuntimeIdentifier)' And
				            '%(ResolvedFileToPublish.Extension)' == '.dylib' And
				            '%(ResolvedFileToPublish.NuGetPackageId)' == '$(_MonoNugetPackageId)'
				            "
			/>

			<!-- There's no need to ship .a files -->
			<!-- We need to remove these from ResolvedFileToPublish before calling ComputeBundleLocation, because we don't want to link with all of these static libraries -->
			<ResolvedFileToPublish
				Remove="@(ResolvedFileToPublish)"
				Condition=" '%(ResolvedFileToPublish.AssetType)' == 'native' And
				            '%(ResolvedFileToPublish.RuntimeIdentifier)' == '$(RuntimeIdentifier)' And
				            '%(ResolvedFileToPublish.Extension)' == '.a' And
				            '%(ResolvedFileToPublish.NuGetPackageId)' == '$(_MonoNugetPackageId)'
				            "
			/>
			<ResolvedFileToPublish
				Remove="@(ResolvedFileToPublish)"
				Condition=" '%(ResolvedFileToPublish.AssetType)' == 'native' And
				            '%(ResolvedFileToPublish.RuntimeIdentifier)' == '$(RuntimeIdentifier)' And
				            '%(ResolvedFileToPublish.Extension)' == '.a' And
				            '%(ResolvedFileToPublish.NuGetPackageId)' == '$(_XamarinNugetPackageId)'
				            "
			/>

			<!-- Put the 'createdump' executable in the expected location in the app bundle when using CoreCLR -->
			<!-- Ref: https://github.com/xamarin/xamarin-macios/issues/11432 -->
			<ResolvedFileToPublish
				Update="@(ResolvedFileToPublish)"
				Condition=" '$(UseMonoRuntime)' == 'false' And
				            '%(ResolvedFileToPublish.Filename)' == 'createdump' And
				            '%(ResolvedFileToPublish.Extension)' == '' And
				            '%(ResolvedFileToPublish.AssetType)' == 'native' And
				            '%(ResolvedFileToPublish.RuntimeIdentifier)' == '$(RuntimeIdentifier)' And
				            '%(ResolvedFileToPublish.NuGetPackageId)' == '$(_MonoNugetPackageId)'
				            "
				PublishFolderType="Assembly"
			/>

			<!-- Remove any dylibs Mono told us not to link with -->
			<ResolvedFileToPublish
				Remove="@(_MonoRuntimeComponentDontLink -> '$(_MonoRuntimePackPath)/native/%(Identity)')"
				Condition=" '%(ResolvedFileToPublish.AssetType)' == 'native' And
				            '%(ResolvedFileToPublish.RuntimeIdentifier)' == '$(RuntimeIdentifier)' And
				            '%(ResolvedFileToPublish.NuGetPackageId)' == '$(_MonoNugetPackageId)'
				            "
			/>

			<!-- We don't ship the runtimeconfig.json file -->
			<ResolvedFileToPublish Remove="$(ProjectRuntimeConfigFilePath)" Condition="'$(GenerateRuntimeConfigurationFiles)' == 'true'" />
		</ItemGroup>

		<ComputeBundleLocation
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			AssemblyDirectory="$(_AppContentsRelativePath)"
			BundleResource="@(BundleResource)"
			Content="@(Content)"
			EmbeddedResource="@(EmbeddedResource)"
			FrameworksDirectory="$(_AppFrameworksRelativePath)"
			PlugInsDirectory="$(_AppPlugInsRelativePath)"
			ProjectDir="$(MSBuildProjectDirectory)"
			ResolvedFileToPublish="@(ResolvedFileToPublish)"
			ResourceDirectory="$(_AppResourcesRelativePath)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
		>
			<Output TaskParameter="UpdatedResolvedFileToPublish" ItemName="_UpdatedResolvedFileToPublish" />
		</ComputeBundleLocation>

		<ItemGroup>
			<!-- Remove everything we've decided not to publish -->
			<_UpdatedResolvedFileToPublish Remove="@(ResolvedFileToPublish)" Condition="'%(_UpdatedResolvedFileToPublish.PublishFolderType)' == 'None'" />

			<!-- Re-populate ResolvedFileToPublish -->
			<ResolvedFileToPublish Remove="@(ResolvedFileToPublish)" />
			<ResolvedFileToPublish Include="@(_UpdatedResolvedFileToPublish)" />

			<!-- apple frameworks are not copied to the app bundle by using the built-in .NET logic of ResolvedFileToPublish due to symlinks -->
			<_FrameworkNativeReference Include="@(ResolvedFileToPublish -> '%(Identity)/%(Filename)')" Condition="'%(ResolvedFileToPublish.PublishFolderType)' == 'AppleFramework' And '%(Extension)' == '.framework'" Kind="Framework" />
			<!-- collect all the xcframeworks -->
			<_UnresolvedXCFrameworks Include="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.PublishFolderType)' == 'AppleFramework' And '%(Extension)' == '.xcframework'" />
			<!-- remove them all from the built-in .NET publish logic -->
			<ResolvedFileToPublish Remove="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.PublishFolderType)' == 'AppleFramework'" />

			<!-- compressed frameworks are uncompressed, but the compressed file is not copied to the app bundle -->
			<_CompressedAppleFrameworks Include="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.PublishFolderType)' == 'CompressedAppleFramework'" />
			<ResolvedFileToPublish Remove="@(_CompressedAppleFrameworks)" />

			<!-- plugins are not copied to the app bundle by using the built-in .NET logic of ResolvedFileToPublish due to symlinks -->
			<_PlugIns Include="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.PublishFolderType)' == 'PlugIns'" />
			<_PlugIns Update="@(_PlugIns">
				<!-- Set TargetDirectory and SourceDirectory for all plugins we have to publish -->
				<TargetDirectory>$(_RelativePublishDir)$(_RelativeAppBundlePath)%(RelativePath)</TargetDirectory>
				<SourceDirectory>%(Identity)</SourceDirectory>
			</_PlugIns>
			<_DirectoriesToPublish Include="@(_PlugIns)" />
			<!-- Finally remove from ResolvedFileToPublish -->
			<ResolvedFileToPublish Remove="@(_PlugIns)" />

			<!-- compressed plugins are uncompressed, but the compressed file is not copied to the app bundle -->
			<_CompressedPlugIns Include="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.PublishFolderType)' == 'CompressedPlugIns'" />
			<ResolvedFileToPublish Remove="@(_CompressedPlugIns)" />

			<!-- we link with static libraries, but we don't copy them to the app bundle -->
			<_ResolvedFileToPublish_StaticLibrary Include="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.PublishFolderType)' == 'StaticLibrary'" />
			<_FileNativeReference Include="@(_ResolvedFileToPublish_StaticLibrary)" Kind="Static" />
			<ResolvedFileToPublish Remove="@(_ResolvedFileToPublish_StaticLibrary)" />

			<!-- we link with dynamic libraries, and we copy them to the app bundle (the copying part is handled in _ComputeDynamicLibrariesToPublish) -->
			<_ResolvedFileToPublish_DynamicLibrary Include="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.PublishFolderType)' == 'DynamicLibrary'" />
			<_FileNativeReference Include="@(_ResolvedFileToPublish_DynamicLibrary)" Kind="Dynamic" />
			<ResolvedFileToPublish Remove="@(_ResolvedFileToPublish_DynamicLibrary)" />

			<!-- we link with the contents of binding resource packages, but the packages themselves aren't copied to the app bundle, so remove them here -->
			<_AppleBindingResourcePackage Include="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.PublishFolderType)' == 'AppleBindingResourcePackage'" />
			<_CompressedAppleBindingResourcePackage Include="@(ResolvedFileToPublish)" Condition="'%(ResolvedFileToPublish.PublishFolderType)' == 'CompressedAppleBindingResourcePackage'" />
			<ResolvedFileToPublish Remove="@(_AppleBindingResourcePackage)" />
			<ResolvedFileToPublish Remove="@(_CompressedAppleBindingResourcePackage)" />

			<!-- Rewrite the relative path so that everything ends up in the app bundle -->
			<ResolvedFileToPublish RelativePath="$(_RelativeAppBundlePath)\%(RelativePath)" />
		</ItemGroup>

		<!-- resolve any .xcframeworks and binding resource packages -->
		<ResolveNativeReferences
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			Architectures="$(TargetArchitectures)"
			BindingResourcePackages="@(_AppleBindingResourcePackage)"
			IntermediateOutputPath="$(DeviceSpecificIntermediateOutputPath)"
			NativeReferences="@(_UnresolvedXCFrameworks)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
			>
			<Output TaskParameter="NativeFrameworks" ItemName="_FrameworkNativeReference" />
		</ResolveNativeReferences>
	</Target>

	<Target Name="_DecompressAppleBindingResourcePackages"
		Inputs="@(_CompressedAppleBindingResourcePackage)"
		DependsOnTargets="_ComputePublishLocation;_ComputeVariables"
		Outputs="@(_CompressedAppleBindingResourcePackage -> '$(_IntermediateDecompressionDir)/%(Filename)%(Extension).stamp')"
		>

		<Ditto
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			AdditionalArguments="-x -k"
			Source="%(_CompressedAppleBindingResourcePackage.Identity)"
			Destination="$(_IntermediateDecompressionDir)/%(Filename)"
			>
		</Ditto>
	</Target>

	<Target Name="_CollectDecompressedAppleBindingResourcePackages"
		DependsOnTargets="_DecompressAppleBindingResourcePackages"
		>

		<ItemGroup>
			<_DecompressedAppleBindingResourcePackage Include="@(_CompressedAppleBindingResourcePackage -> '$(_IntermediateDecompressionDir)/%(Filename)')" />
		</ItemGroup>

		<!-- resolve any .xcframeworks and binding resource packages -->
		<ResolveNativeReferences
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			Architectures="$(TargetArchitectures)"
			BindingResourcePackages="@(_DecompressedAppleBindingResourcePackage)"
			IntermediateOutputPath="$(DeviceSpecificIntermediateOutputPath)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
			>
			<Output TaskParameter="NativeFrameworks" ItemName="_FrameworkNativeReference" />
		</ResolveNativeReferences>

		<Touch
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			AlwaysCreate="true"
			Files="@(_CompressedAppleBindingResourcePackage -> '$(_IntermediateDecompressionDir)/%(Filename)%(Extension).stamp')"
			>
			<Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
		</Touch>
	</Target>

	<Target Name="_DecompressPlugIns"
		Inputs="@(_CompressedPlugIns)"
		DependsOnTargets="_ComputePublishLocation;_ComputeVariables"
		Outputs="@(_CompressedPlugIns -> '$(_IntermediateDecompressionDir)/%(Filename)%(Extension).stamp')"
		>

		<Ditto
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			AdditionalArguments="-x -k"
			Source="%(_CompressedPlugIns.Identity)"
			Destination="$(_IntermediateDecompressionDir)/%(Filename)%(Extension)"
			>
		</Ditto>
	</Target>

	<Target Name="_CollectDecompressedPlugIns"
		DependsOnTargets="_DecompressPlugIns"
		>

		<ItemGroup>
			<!-- Set TargetDirectory and SourceDirectory for all directories we have to publish -->
			<_DecompressedPlugIns Include="@(_CompressedPlugIns -> '$(_IntermediateDecompressionDir)/%(Filename)%(Extension)')" />
		</ItemGroup>
		<ItemGroup>
			<_DecompressedPlugIns Update="@(_DecompressedPlugIns)">
				<TargetDirectory>$(_RelativePublishDir)$(_RelativeAppBundlePath)$(_AppPlugInsRelativePath)</TargetDirectory>
				<SourceDirectory>$(_IntermediateDecompressionDir)/%(Filename)%(Extension)</SourceDirectory>
			</_DecompressedPlugIns>
		</ItemGroup>

		<Touch
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			AlwaysCreate="true"
			Files="@(_CompressedPlugIns -> '$(_IntermediateDecompressionDir)/%(Filename)%(Extension).stamp')"
			>
			<Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
		</Touch>

		<ItemGroup>
			<_DirectoriesToPublish Include="@(_DecompressedPlugIns)" />
		</ItemGroup>
	</Target>

	<Target Name="_DecompressAppleFrameworks"
		Inputs="@(_CompressedAppleFrameworks)"
		Outputs="@(_CompressedAppleFrameworks -> '$(_IntermediateFrameworksDir)/%(Filename)%(Extension).stamp')"
		DependsOnTargets="_ComputePublishLocation;_ComputeVariables"
		BeforeTargets="_ExpandNativeReferences"
		>

		<Ditto
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			AdditionalArguments="-x -k"
			Source="%(_CompressedAppleFrameworks.Identity)"
			Destination="$(_IntermediateFrameworksDir)/%(Filename)%(Extension)"
			>
		</Ditto>

		<Touch
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			AlwaysCreate="true"
			Files="@(_CompressedAppleFrameworks -> '$(_IntermediateFrameworksDir)/%(Filename)%(Extension).stamp')"
			>
			<Output TaskParameter="TouchedFiles" ItemName="FileWrites" />
		</Touch>
	</Target>

	<Target Name="_CollectDecompressedAppleFrameworks"
		DependsOnTargets="_DecompressAppleFrameworks"
		Condition="@(_CompressedAppleFrameworks->Count()) &gt; 0"
		>

		<GetFileSystemEntries
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			DirectoryPath="$(_IntermediateFrameworksDir)/%(_CompressedAppleFrameworks.Filename)%(_CompressedAppleFrameworks.Extension)"
			Pattern="*.framework"
			Recursive="false"
			IncludeDirectories="true"
			>
			<Output TaskParameter="Entries" ItemName="_DecompressedFramework" />
		</GetFileSystemEntries>

		<GetFileSystemEntries
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			DirectoryPath="$(_IntermediateFrameworksDir)/%(_CompressedAppleFrameworks.Filename)%(_CompressedAppleFrameworks.Extension)"
			Pattern="*.xcframework"
			Recursive="false"
			IncludeDirectories="true"
			>
			<Output TaskParameter="Entries" ItemName="_DecompressedXCFramework" />
		</GetFileSystemEntries>

		<ItemGroup>
			<!-- include any normal frameworks directly in _FrameworkNativeReference. -->
			<!-- .xcframeworks need to be resolved to a platform-specific .framework below -->
			<_DecompressedFramework Include="$([System.IO.Directory]::GetDirectories('$(_IntermediateFrameworksDir)/%(_CompressedAppleFrameworks.Filename)%(_CompressedAppleFrameworks.Extension)','*.framework'))" />
			<_FrameworkNativeReference Include="@(_DecompressedFramework -> '%(Identity)/%(Filename)')" Kind="Framework" />
		</ItemGroup>

		<!-- resolve the .xcframeworks -->
		<ResolveNativeReferences
			SessionId="$(BuildSessionId)"
			Condition="'$(IsMacEnabled)' == 'true'"
			Architectures="$(TargetArchitectures)"
			IntermediateOutputPath="$(DeviceSpecificIntermediateOutputPath)"
			NativeReferences="@(_DecompressedXCFramework)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
			>
			<Output TaskParameter="NativeFrameworks" ItemName="_FrameworkNativeReference" />
		</ResolveNativeReferences>
	</Target>

	<Target Name="_ValidateRuntimeIdentifier"
		Condition="'$(RuntimeIdentifier)' != '' And '$(_RuntimeIdentifierValidation)' != 'false'"
		BeforeTargets="Restore;Build;ResolvedFrameworkReference;ResolveRuntimePackAssets;ProcessFrameworkReferences">
		<PropertyGroup>
			<_IsValidRuntimeIdentifier Condition="@(_XamarinValidRuntimeIdentifier->WithMetadataValue('Platform', '$(_PlatformName)')->WithMetadataValue('Filename', '$(RuntimeIdentifier)')->Count()) &gt; 0">true</_IsValidRuntimeIdentifier>
		</PropertyGroup>
		<Error Condition="'$(_IsValidRuntimeIdentifier)' != 'true'" Text="The RuntimeIdentifier '$(RuntimeIdentifier)' is invalid." />
	</Target>

	<!-- Install & Run -->

	<PropertyGroup>
		<_MlaunchPath Condition="'$(_MlaunchPath)' == ''">$(_XamarinSdkRootDirectory)tools\bin\mlaunch</_MlaunchPath>
	</PropertyGroup>

	<Target Name="_InstallMobile" DependsOnTargets="_DetectSdkLocations;_GenerateBundleName" Condition="'$(_SdkIsSimulator)' == 'false'">
		<GetMlaunchArguments
			SessionId="$(BuildSessionId)"
			AppBundlePath="$(_AppBundlePath)"
			AppManifestPath="$(_AppBundleManifestPath)"
			DeviceName="$(_DeviceName)"
			InstallApp="$(_AppBundlePath)"
			MlaunchPath="$(_MlaunchPath)"
			SdkDevPath="$(_SdkDevPath)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			SdkVersion="$(_SdkVersion)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
		>
			<Output TaskParameter="MlaunchArguments" PropertyName="_MlaunchInstallArguments" />
		</GetMlaunchArguments>

		<Exec SessionId="$(BuildSessionId)" Command="$(_MlaunchPath) $(_MlaunchInstallArguments)" />
	</Target>

	<!-- This is only needed for mobile platforms, RunCommand and RunArguments are defined for macOS in Microsoft.macOS.Sdk.targets. -->
	<Target Name="_PrepareRunMobile" DependsOnTargets="_InstallMobile" Condition="'$(_PlatformName)' != 'macOS' And '$(_PlatformName)' != 'MacCatalyst'">
		<PropertyGroup>
			<!-- capture output by default -->
			<_MlaunchCaptureOutput Condition="'$(_MlaunchCaptureOutput)' == ''">true</_MlaunchCaptureOutput>
			<!-- wait for exit by default -->
			<_MlaunchWaitForExit Condition="'$(_MlaunchWaitForExit)' == ''">true</_MlaunchWaitForExit>
			<!-- don't set standard output/error path, mlaunch will by default write to stdout/stderr -->
		</PropertyGroup>
		<GetMlaunchArguments
			SessionId="$(BuildSessionId)"
			AppBundlePath="$(_AppBundlePath)"
			AppManifestPath="$(_AppBundleManifestPath)"
			CaptureOutput="$(_MlaunchCaptureOutput)"
			DeviceName="$(_DeviceName)"
			LaunchApp="$(_AppBundlePath)"
			MlaunchPath="$(_MlaunchPath)"
			SdkIsSimulator="$(_SdkIsSimulator)"
			SdkDevPath="$(_SdkDevPath)"
			SdkVersion="$(_SdkVersion)"
			StandardErrorPath="$(_MlaunchStandardErrorPath)"
			StandardOutputPath="$(_MlaunchStandardOutputPath)"
			TargetFrameworkMoniker="$(_ComputedTargetFrameworkMoniker)"
			WaitForExit="$(_MlaunchWaitForExit)"
		>
			<Output TaskParameter="MlaunchArguments" PropertyName="_MlaunchRunArguments" />
		</GetMlaunchArguments>

		<PropertyGroup>
			<RunCommand>$(_MlaunchPath)</RunCommand>
			<RunArguments>$(_MlaunchRunArguments)</RunArguments>
		</PropertyGroup>
	</Target>

	<PropertyGroup>
		<_PrepareRunDependsOn>
			Build;
			_PrepareRunMobile;
		</_PrepareRunDependsOn>
	</PropertyGroup>

	<Target Name="_PrepareRun" DependsOnTargets="$(_PrepareRunDependsOn)" BeforeTargets="Run" />

	<!-- Import existing targets -->

	<PropertyGroup>
		<_ProjectLanguage>$(Language)</_ProjectLanguage>
		<_ProjectLanguage Condition="'$(_ProjectLanguage)' == '' Or '$(_ProjectLanguage)' == 'C#' ">CSharp</_ProjectLanguage>
		<_ProjectLanguage Condition="'$(_ProjectLanguage)' == 'F#' ">FSharp</_ProjectLanguage>

		<_TargetsDirectory>$(_XamarinSdkRootDirectory)\tools\msbuild\$(_PlatformName)\</_TargetsDirectory>
	</PropertyGroup>

	<Import Project="$(_TargetsDirectory)Xamarin.iOS.$(_ProjectLanguage).targets"                  Condition="'$(_ProjectType)' == 'iOSExecutableProject' Or '$(_ProjectType)' == 'iOSClassLibrary' " />
	<Import Project="$(_TargetsDirectory)Xamarin.iOS.AppExtension.$(_ProjectLanguage).targets"     Condition="'$(_ProjectType)' == 'iOSAppExtensionProject' " />
	<Import Project="$(_TargetsDirectory)Xamarin.iOS.ObjCBinding.$(_ProjectLanguage).targets"      Condition="'$(_ProjectType)' == 'iOSBindingProject' " />

	<Import Project="$(_TargetsDirectory)Xamarin.TVOS.$(_ProjectLanguage).targets"                 Condition="'$(_ProjectType)' == 'tvOSExecutableProject' Or '$(_ProjectType)' == 'tvOSClassLibrary' " />
	<Import Project="$(_TargetsDirectory)Xamarin.TVOS.AppExtension.$(_ProjectLanguage).targets"    Condition="'$(_ProjectType)' == 'tvOSAppExtensionProject' " />
	<Import Project="$(_TargetsDirectory)Xamarin.TVOS.ObjCBinding.$(_ProjectLanguage).targets"     Condition="'$(_ProjectType)' == 'tvOSBindingProject' " />

	<Import Project="$(_TargetsDirectory)Xamarin.WatchOS.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'watchOSClassLibrary' " />
	<Import Project="$(_TargetsDirectory)Xamarin.WatchOS.App.$(_ProjectLanguage).targets"          Condition="'$(_ProjectType)' == 'watchOSAppProject' " />
	<Import Project="$(_TargetsDirectory)Xamarin.WatchOS.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'watchOSAppExtensionProject' " />
	<Import Project="$(_TargetsDirectory)Xamarin.WatchOS.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'watchOSBindingProject' " />

	<Import Project="$(_TargetsDirectory)Xamarin.Mac.$(_ProjectLanguage).targets"                  Condition="'$(_ProjectType)' == 'macOSExecutableProject' Or '$(_ProjectType)' == 'macOSClassLibrary' " />
	<Import Project="$(_TargetsDirectory)Xamarin.Mac.AppExtension.$(_ProjectLanguage).targets"     Condition="'$(_ProjectType)' == 'macOSAppExtensionProject' " />
	<Import Project="$(_TargetsDirectory)Xamarin.Mac.ObjCBinding.$(_ProjectLanguage).targets"      Condition="'$(_ProjectType)' == 'macOSBindingProject' " />

	<Import Project="$(_TargetsDirectory)Xamarin.MacCatalyst.$(_ProjectLanguage).targets"              Condition="'$(_ProjectType)' == 'MacCatalystExecutableProject' Or '$(_ProjectType)' == 'MacCatalystClassLibrary' " />
	<Import Project="$(_TargetsDirectory)Xamarin.MacCatalyst.AppExtension.$(_ProjectLanguage).targets" Condition="'$(_ProjectType)' == 'MacCatalystSAppExtensionProject' " />
	<Import Project="$(_TargetsDirectory)Xamarin.MacCatalyst.ObjCBinding.$(_ProjectLanguage).targets"  Condition="'$(_ProjectType)' == 'MacCatalystBindingProject' " />
	
</Project>
